"use strict";var e=require("fs"),n=require("path"),r=require("dotenv"),o=require("chalk");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i,t,s=l(e),a=l(n),c=l(r),u=l(o);function d(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var f=function(){if(t)return i;t=1;const e=s.default,n=a.default,r=c.default,o=u.default,l=process.cwd(),d=n=>{const l=e.readFileSync(n,"utf8"),i=r.parse(l);return i||(console.error(o.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),i},f=async(r=l,i=".env.example",t=".env")=>{const s=await e.promises.readdir(r,{withFileTypes:!0});await Promise.all(s.map((async l=>{const s=n.join(r,l.name);if(l.isDirectory()&&"node_modules"!==l.name&&"dist"!==l.name)await f(s,i,t);else if(l.isFile()&&l.name===i){const l=n.join(r,t);try{await e.promises.stat(l),((e,r)=>{const l=d(e),i=d(r),t=Object.keys(l),s=Object.keys(i),a=t.filter((e=>!s.includes(e))),c=t.filter((e=>l[e]&&!i[e]&&!a.includes(e))),u=s.filter(((e,n,r)=>r.indexOf(e)!==n)),f=s.filter((e=>!t.includes(e))),v=n.dirname(r);a.length>0&&(console.error(o.red.inverse(`\nMissing variables in ${v}`)),console.log(o.red(`${a.join("、")}`))),c.length>0&&(console.error(o.hex("#FFA500").inverse(`\nEmpty value variables in ${v}`)),console.log(o.hex("#FFA500")(`${c.join("、")}`))),u.length>0&&(console.error(o.yellow.inverse(`\nDuplicate variables in ${v}`)),console.log(o.yellow(`${u.join("、")}`))),f.length>0&&(console.error(o.blue.inverse(`\nExtra variables in ${v}`)),console.log(o.blue(`${f.join("、")}`))),a.length>0||c.length>0||u.length>0||f.length>0?process.exit(1):console.log(o.green.inverse(`\nAll variables in ${v} are correct!`))})(s,l)}catch(e){console.warn(o.yellow(`\nNo matching env file found for ${s}`))}}})))};return i=f}(),v=d(f);module.exports=v;
//# sourceMappingURL=index.min.js.map
