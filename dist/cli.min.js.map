{"version":3,"file":"cli.min.js","sources":["../src/lib/index.js","../src/bin/cli.js?commonjs-entry","../src/bin/cli.js"],"sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst chalk = require('chalk')\r\n\r\nconst defaultDir = process.cwd()\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultFiles = {\r\n  schemaName: defaultSchemaFileName,\r\n  envName: defaultEnvFileName\r\n}\r\nconst defaultOptions = {\r\n  isCheckMissing: true,\r\n  isCheckEmptyValue: true,\r\n  isCheckExtra: true\r\n}\r\n\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(chalk.red.inverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaPath \r\n * @param {string} envPath \r\n */\r\nconst checkEnvVariables = (schemaPath, envPath, checkOptions) => {\r\n  const { isCheckMissing, isCheckEmptyValue, isCheckDuplicate, isCheckExtra } = checkOptions\r\n  if (!isCheckMissing && !isCheckEmptyValue && !isCheckDuplicate && !isCheckExtra) {\r\n    console.log(chalk.hex('#ff69b4').inverse('You have disabled all checks, nothing to do.'))\r\n  }\r\n\r\n  const schemaVars = parseEnvFile(schemaPath)\r\n  const envVars = parseEnvFile(envPath)\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = isCheckMissing ? schemaKeys.filter(key => !envKeys.includes(key)) : []\r\n  const emptyValueKeys = isCheckEmptyValue ? schemaKeys.filter(key => schemaVars[key] && !envVars[key] && !missingKeys.includes(key)) : []\r\n  const extraKeys = isCheckExtra ? envKeys.filter(key => !schemaKeys.includes(key)) : []\r\n\r\n  const envDir = path.dirname(envPath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(chalk.red.inverse(`\\nMissing variables in ${envDir}`))\r\n    console.log(chalk.red(`${missingKeys.join('、')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(chalk.hex('#FFA500').inverse(`\\nEmpty value variables in ${envDir}`))\r\n    console.log(chalk.hex('#FFA500')(`${emptyValueKeys.join('、')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(chalk.blue.inverse(`\\nExtra variables in ${envDir}`))\r\n    console.log(chalk.blue(`${extraKeys.join('、')}`))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 ) { \r\n    process.exit(1)\r\n  } else {\r\n    console.log(chalk.green.inverse(`\\nAll variables in ${envDir} are correct!`))\r\n  }\r\n}\r\n\r\n/**\r\n * 主程式，遞迴檢查目錄中的 env file 和 schema 檔案\r\n * 函式使用方式：\r\n * envAligner(rootDir, fileNames, checkOptions)\r\n * envAligner({fileNames: customFileNamesObject})\r\n * envAligner({checkOptions: customCheckOptionsObject})\r\n * @param {string} rootDir 根目錄\r\n * @param {string} schemaFileName schema 檔案名稱\r\n * @param {string} envFileName env 檔案名稱\r\n */\r\nconst envAligner = async (rootDir = defaultDir, fileNames = defaultFiles, checkOptions = defaultOptions) => {\r\n \r\n  if (rootDir === 'use default') {\r\n    rootDir = defaultDir\r\n  }\r\n\r\n  try {\r\n    // 檢查 rootDir 是否存在且是目錄\r\n    const stats = await fs.promises.stat(rootDir)\r\n    if (!stats.isDirectory()) {\r\n      throw new Error(`${rootDir} is not a valid directory`)\r\n    }\r\n  // eslint-disable-next-line no-unused-vars\r\n  } catch (error) {\r\n    console.error(chalk.red(`\\nError: ${rootDir} does not exist or is not accessible.`))\r\n    process.exit(1)\r\n  }\r\n\r\n  const { schemaName: schemaFileName, envName: envFileName } = fileNames\r\n\r\n  // 使用 fs.promises.readdir 來非同步列出目錄\r\n  const entries = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n\r\n  await Promise.all(entries.map(async (entry) => {\r\n    const entryPath = path.join(rootDir, entry.name) // 組合檔案或目錄的路徑\r\n\r\n    if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== 'dist' ) {\r\n      await envAligner(entryPath, fileNames, checkOptions) // 如果是目錄，遞迴調用 envAligner\r\n    } else if (entry.isFile() && entry.name === schemaFileName) {\r\n      const envFilePath = path.join(rootDir, envFileName)\r\n\r\n      try {\r\n        await fs.promises.stat(envFilePath)\r\n        checkEnvVariables(entryPath, envFilePath, checkOptions)\r\n      // eslint-disable-next-line no-unused-vars\r\n      } catch (error) {\r\n        console.warn(chalk.yellow(`\\nNo matching env file found for ${entryPath}`))\r\n      }\r\n    }\r\n  }))\r\n}\r\n\r\nmodule.exports = envAligner","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireCli } from \"C:\\\\Users\\\\user\\\\Desktop\\\\env-aligner\\\\src\\\\bin\\\\cli.js\";\nvar cliExports = requireCli();\nexport { cliExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(cliExports);","const chalk = require(\"chalk\")\r\nconst { program, Option } = require(\"commander\")\r\nconst envAligner = require(\"../lib\")\r\nconst { version } = require(\"../../package.json\")\r\n\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultDir = process.cwd()\r\n\r\n/**\r\n * 指令使用方式：\r\n * npx env-aligner -s .env.example -e .env\r\n * npx env-aligner -s .env.example\r\n * npx env-aligner -e .env\r\n * npx env-aligner\r\n * npx env-aligner -m false -n false -d false -x false\r\n */\r\nprogram\r\n  .name(\"env-aligner\")\r\n  .description(\"A tool to align the env variables in the project\")\r\n  .version(version, '-v', '--version')\r\n  .showSuggestionAfterError() // 顯示錯誤時的建議\r\n  .addHelpText('beforeAll', () => {\r\n    console.log(chalk.green('Env Aligner is working!'))\r\n  })\r\n  .addOption(new Option('-s, --schema <schema>', 'The schema file for environment variables, default is .env.example.').default('.env.example'))\r\n  .addOption(new Option('-e, --env <env>', 'The env file to check, default is .env.').default('.env'))\r\n  .addOption(new Option('-m, --missing <missing>', 'Check missing variables in the env file.').default(true))\r\n  .addOption(new Option('-n, --empty <empty>', 'Check empty value variables in the env file.').default(true))\r\n  .addOption(new Option('-x, --extra <extra>', 'Check extra variables in the env file.').default(true))\r\n  .addHelpText('after', \r\n    `\r\n    Examples:\r\n        $ env-aligner\r\n        $ env-aligner -s .env.example -e .env\r\n        $ env-aligner -s .env.example\r\n        $ env-aligner -e .env\r\n    `\r\n  )\r\n  .parse(process.argv)\r\n\r\n\r\n// 取得當前工作目錄\r\nconst { INIT_CWD } = process.env\r\nconst rootDir = INIT_CWD || defaultDir\r\n\r\n// 取得參數\r\nconst {\r\n  schema = defaultSchemaFileName,\r\n  env = defaultEnvFileName,\r\n  missing = true,\r\n  empty = true,\r\n  extra = true\r\n} = program.opts()\r\n\r\nconst customFileNames= {\r\n  schemaName: schema,\r\n  envName: env\r\n}\r\n\r\nconst customOptions = {\r\n  isCheckMissing: JSON.parse(missing),\r\n  isCheckEmptyValue: JSON.parse(empty),\r\n  isCheckExtra: JSON.parse(extra)\r\n}\r\n\r\n\r\n// 執行 envAligner\r\nenvAligner(rootDir, customFileNames, customOptions)\r\n"],"names":["fs","require$$0","path","require$$1","dotenv","require$$2","chalk","require$$3","defaultDir","process","cwd","defaultFiles","schemaName","envName","defaultOptions","isCheckMissing","isCheckEmptyValue","isCheckExtra","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","red","inverse","exit","envAligner","async","rootDir","fileNames","checkOptions","promises","stat","isDirectory","Error","schemaFileName","envFileName","entries","readdir","withFileTypes","Promise","all","map","entry","entryPath","join","name","isFile","envFilePath","schemaPath","envPath","isCheckDuplicate","log","hex","schemaVars","envVars","schemaKeys","Object","keys","envKeys","missingKeys","filter","key","includes","emptyValueKeys","extraKeys","envDir","dirname","length","blue","green","checkEnvVariables","warn","yellow","lib","cliExports","program","Option","version","defaultSchemaFileName","defaultEnvFileName","description","showSuggestionAfterError","addHelpText","addOption","default","argv","INIT_CWD","env","schema","missing","empty","extra","opts","JSON","requireCli","cli","getDefaultExportFromCjs"],"mappings":"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"}