"use strict";var e=require("fs"),n=require("path"),r=require("dotenv"),s=require("chalk");function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o,t,a=i(e),l=i(n),c=i(r),u=i(s);function d(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var f=d(function(){if(t)return o;t=1;const e=a.default,n=l.default,r=c.default,s=u.default,i=process.cwd(),d={schemaName:".env.example",envName:".env"},f={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},h=n=>{const i=e.readFileSync(n,"utf8"),o=r.parse(i);return o||(console.error(s.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),o},m=async(r=i,o=d,t=f)=>{"use default"===r&&(r=i);const{schemaName:a,envName:l}=o,c=await e.promises.readdir(r,{withFileTypes:!0});await Promise.all(c.map((async i=>{const c=n.join(r,i.name);if(i.isDirectory()&&"node_modules"!==i.name&&"dist"!==i.name)await m(c,o,t);else if(i.isFile()&&i.name===a){const i=n.join(r,l);try{await e.promises.stat(i),((e,r,i)=>{const{isCheckMissing:o,isCheckEmptyValue:t,isCheckDuplicate:a,isCheckExtra:l}=i;o||t||a||l||console.log(s.hex("#ff69b4").inverse("You have disabled all checks, nothing to do."));const c=h(e),u=h(r),d=Object.keys(c),f=Object.keys(u),m=o?d.filter((e=>!f.includes(e))):[],v=t?d.filter((e=>c[e]&&!u[e]&&!m.includes(e))):[],p=l?f.filter((e=>!d.includes(e))):[],g=n.dirname(r);m.length>0&&(console.error(s.red.inverse(`\nMissing variables in ${g}`)),console.log(s.red(`${m.join("、")}`))),v.length>0&&(console.error(s.hex("#FFA500").inverse(`\nEmpty value variables in ${g}`)),console.log(s.hex("#FFA500")(`${v.join("、")}`))),p.length>0&&(console.error(s.blue.inverse(`\nExtra variables in ${g}`)),console.log(s.blue(`${p.join("、")}`))),m.length>0||v.length>0?process.exit(1):console.log(s.green.inverse(`\nAll variables in ${g} are correct!`))})(c,i,t)}catch(e){console.warn(s.yellow(`\nNo matching env file found for ${c}`))}}})))};return o=m}());module.exports=f;
//# sourceMappingURL=index.min.js.map
