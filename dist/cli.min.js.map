{"version":3,"file":"cli.min.js","sources":["../src/lib/index.js","../src/bin/cli.js?commonjs-entry","../src/bin/cli.js"],"sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst chalk = require('chalk')\r\n\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultDir = process.cwd()\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(chalk.red.inverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaPath \r\n * @param {string} envPath \r\n */\r\nconst checkEnvVariables = (schemaPath, envPath) => {\r\n  const schemaVars = parseEnvFile(schemaPath)\r\n  const envVars = parseEnvFile(envPath)\r\n\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = schemaKeys.filter(key => !envKeys.includes(key))\r\n  const emptyValueKeys = schemaKeys.filter(key => schemaVars[key] && !envVars[key] && !missingKeys.includes(key))\r\n  const duplicateKeys = envKeys.filter((key, index, self) => self.indexOf(key) !== index)\r\n  const extraKeys = envKeys.filter(key => !schemaKeys.includes(key))\r\n\r\n  const envDir = path.dirname(envPath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(chalk.red.inverse(`\\nMissing variables in ${envDir}`))\r\n    console.log(chalk.red(`${missingKeys.join('、')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(chalk.hex('#FFA500').inverse(`\\nEmpty value variables in ${envDir}`))\r\n    console.log(chalk.hex('#FFA500')(`${emptyValueKeys.join('、')}`))\r\n  }\r\n\r\n  if (duplicateKeys.length > 0) {\r\n    console.error(chalk.yellow.inverse(`\\nDuplicate variables in ${envDir}`))\r\n    console.log(chalk.yellow(`${duplicateKeys.join('、')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(chalk.blue.inverse(`\\nExtra variables in ${envDir}`))\r\n    console.log(chalk.blue(`${extraKeys.join('、')}`))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 || duplicateKeys.length > 0 || extraKeys.length > 0) {\r\n    process.exit(1)\r\n  } else {\r\n    console.log(chalk.green.inverse(`\\nAll variables in ${envDir} are correct!`))\r\n  }\r\n}\r\n\r\n/**\r\n * 主程式，遞迴檢查目錄中的 env file 和 schema 檔案\r\n * @param {string} rootDir 根目錄\r\n * @param {string} schemaFileName schema 檔案名稱\r\n * @param {string} envFileName env 檔案名稱\r\n */\r\nconst envAligner = async (rootDir = defaultDir, schemaFileName = defaultSchemaFileName, envFileName = defaultEnvFileName) => {\r\n  // 使用 fs.promises.readdir 來非同步列出目錄\r\n  const entries = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n\r\n  // 使用 Promise.all 非同步處理每個檔案和子目錄\r\n  await Promise.all(entries.map(async (entry) => {\r\n    const entryPath = path.join(rootDir, entry.name) // 組合檔案或目錄的路徑\r\n\r\n    if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== 'dist') {\r\n      await envAligner(entryPath, schemaFileName, envFileName) // 如果是目錄，遞迴調用 envAligner\r\n    } else if (entry.isFile() && entry.name === schemaFileName) {\r\n      const envFilePath = path.join(rootDir, envFileName)\r\n\r\n      try {\r\n        await fs.promises.stat(envFilePath) // 使用 fs.promises.stat 來非同步檢查 .env 檔案是否存在\r\n        checkEnvVariables(entryPath, envFilePath) // 如果檔案存在，檢查環境變數\r\n      // eslint-disable-next-line no-unused-vars\r\n      } catch (error) {\r\n        console.warn(chalk.yellow(`\\nNo matching env file found for ${entryPath}`))\r\n      }\r\n    }\r\n  }))\r\n}\r\n\r\nmodule.exports = envAligner","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireCli } from \"C:\\\\Users\\\\Chung-Ying\\\\Desktop\\\\env-aligner\\\\src\\\\bin\\\\cli.js\";\nvar cliExports = requireCli();\nexport { cliExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(cliExports);","const chalk = require(\"chalk\")\r\nconst commander = require(\"commander\")\r\nconst envAligner = require(\"../lib\")\r\nconst { version } = require(\"../../package.json\")\r\n\r\nconst { program, Option } = commander\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultDir = process.cwd()\r\n\r\nprogram\r\n  .name(\"env-aligner\")\r\n  .description(\"A tool to align the env variables in the project\")\r\n  .version(version, '-v', '--version')\r\n  .addHelpCommand(false) // 禁用預設的 --help 選項\r\n  .showSuggestionAfterError() // 顯示錯誤時的建議\r\n  .addHelpText('beforeAll', () => {\r\n    console.log(chalk.green('Env Aligner is working!'))\r\n  })\r\n  .addOption(new Option('-s, --schema <schema>', 'The schema file for environment variables, default is .env.example.').default('.env.example'))\r\n  .addOption(new Option('-e, --env <env>', 'The env file to check, default is .env.').default('.env'))\r\n  .addHelpText('after', \r\n    `\r\n    Examples:\r\n        $ env-aligner\r\n        $ env-aligner -s .env.example -e .env\r\n        $ env-aligner -s .env.example\r\n        $ env-aligner -e .env\r\n    `\r\n  )\r\n  .parse(process.argv)\r\n\r\n\r\n// 取得當前工作目錄\r\nconst { INIT_CWD } = process.env\r\nconst rootDir = INIT_CWD || defaultDir\r\n\r\n// 取得參數\r\nconst { schemaFileName = defaultSchemaFileName, envFileName = defaultEnvFileName } = program.opts()\r\n\r\n\r\n// 執行 envAligner\r\nenvAligner(rootDir, schemaFileName, envFileName)\r\n"],"names":["fs","require$$0","path","require$$1","dotenv","require$$2","chalk","require$$3","defaultDir","process","cwd","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","red","inverse","exit","envAligner","async","rootDir","schemaFileName","envFileName","entries","promises","readdir","withFileTypes","Promise","all","map","entry","entryPath","join","name","isDirectory","isFile","envFilePath","stat","schemaPath","envPath","schemaVars","envVars","schemaKeys","Object","keys","envKeys","missingKeys","filter","key","includes","emptyValueKeys","duplicateKeys","index","self","indexOf","extraKeys","envDir","dirname","length","log","hex","yellow","blue","green","checkEnvVariables","warn","lib","cliExports","commander","version","program","Option","defaultSchemaFileName","defaultEnvFileName","description","addHelpCommand","showSuggestionAfterError","addHelpText","addOption","default","argv","INIT_CWD","env","opts","requireCli","cli","getDefaultExportFromCjs"],"mappings":"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"}