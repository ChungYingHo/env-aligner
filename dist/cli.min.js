#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),i=require("fs"),r=require("path"),t=require("dotenv");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(e),a=o(n),l=o(i),c=o(r),m=o(t);function u(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var f,d,p,v,g,h,y,$,x,b,w={};function E(){if(d)return f;return d=1,f={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}function k(){if(v)return p;v=1;const e=l.default,n=m.default,i=E();return p={parseEnvFile:r=>{const t=e.readFileSync(r,"utf8"),o=n.parse(t);return o||(console.error(i.formatRedInverse(`\nFailed to parse ${r}`)),process.exit(1)),Object.keys(o).length||(console.error(i.formatRedInverse(`\n${r} is empty or has no valid variables.`)),process.exit(1)),o},fileExists:async function(n){try{return await e.promises.access(n,e.constants.F_OK),!0}catch{return!1}},validateFileNames:e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(i.formatRedInverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(i.formatRedInverse(`\n${n} must be a string`)),process.exit(1))}))},validateDirectory:async function(n){try{(await e.promises.stat(n)).isDirectory()||(console.error(i.formatRed(`[error] ${n} is not a directory.`)),process.exit(1))}catch(e){console.error(i.formatRed(`[error] Failed to access ${n}: ${e.message}`)),process.exit(1)}}}}function j(){if(h)return g;h=1;const e=l.default,n=m.default,i=c.default,r=E(),t=k(),o=async(o,s)=>{const a=e.readFileSync(o,"utf8"),l=n.parse(a),c=t.parseEnvFile(s),m=[],u=a.split(/\r?\n/);for(let e=0;e<u.length;e++){const n=u[e].trim();if(""===n){m.push("");continue}if(n.startsWith("#")){m.push(u[e]);continue}const i=n.indexOf("=");if(-1!==i){const e=n.slice(0,i).trim();if(e in l){const n=c[e]??"",i=n.includes("\n")?`"${n}"`:n;m.push(`${e}=${i}`)}}}await e.promises.writeFile(s,m.join("\n"),"utf8"),console.log(r.formatGreenInverse(`\nAligned ${i.basename(s)} with ${i.basename(o)}`))};return g={cloneSchemaToEnv:async(n,o,s)=>{const a=i.join(s,n),l=i.join(s,o);await t.fileExists(a)||(console.error(r.formatRedInverse(`\nSchema file ${n} does not exist in ${s}`)),process.exit(1)),await t.fileExists(l)?console.log(r.formatBlue(`\n${o} already exists in ${s}, skipping copy.`)):(await e.promises.copyFile(a,l),console.log(r.formatGreen(`\nCopied ${n} to ${o} in ${s}`)))},alignEnvWithSchema:o,checkEnvVariables:async(e,n,s,a)=>{const l=t.parseEnvFile(e),c=t.parseEnvFile(n),m=Object.keys(l),u=Object.keys(c),f=m.filter((e=>!u.includes(e))),d=m.filter((e=>l[e]&&""===c[e]&&!f.includes(e))),p=s?u.filter((e=>!m.includes(e))):[],v=i.dirname(n);if(f.length>0&&(console.error(r.formatRedInverse(`\n[Missing Variables] in ${v}`)),console.log(r.formatRed(`→ ${f.join(", ")}`))),d.length>0&&(console.error(r.formatYellowInverse(`\n[Empty Variables] in ${v}`)),console.log(r.formatYellow(`→ ${d.join(", ")}`))),p.length>0&&(console.error(r.formatBlueInverse(`\n[Extra Variables] in ${v}`)),console.log(r.formatBlue(`→ ${p.join(", ")}`))),s&&a?await o(e,n):!s&&a&&console.warn(r.formatYellowInverse('\n[Warning] The "align" option can only be used in strict mode. Skipping alignment.')),f.length>0||d.length>0)process.exit(1);else{const e=`\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\n\n      ✅ All variables in: ${v}\n\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n    `;console.log(r.formatGreen(e))}}}}function N(){if(b)return x;b=1;const e=l.default,n=c.default,i=E(),r=k(),t=j(),{defaultDir:o,defaultFiles:s,defaultMode:a}=function(){if($)return y;$=1;const e=process.cwd(),n=".env.example",i=".env";return y={defaultDir:e,defaultSchemaFileName:n,defaultEnvFileName:i,defaultFiles:{schemaName:n,envName:i},defaultMode:{isStrict:!1,isAlign:!1}}}(),m=async({rootDir:l=o,fileNames:c=s,mode:u=a,isClone:f=!1}={})=>{const d={...s,...c};r.validateFileNames(d);const{schemaName:p,envName:v}=d,{isStrict:g,isAlign:h}=u;if(await r.validateDirectory(l),f){return void(await t.cloneSchemaToEnv(p,v,l)&&console.log(i.formatGreen(`✅ env file created successfully in ${l}`)))}const y=await e.promises.readdir(l,{withFileTypes:!0}),$=y.map((e=>e.name)),x=n.join(l,p),b=n.join(l,v);if($.includes(v)){const[e,n]=await Promise.all([r.fileExists(x),r.fileExists(b)]);if(e&&n)return t.checkEnvVariables(x,b,g,h),!0;console.log(i.formatBlue(`[info] Skipping check in ${l}, searching deeper...`))}for(const e of y){if(!e.isDirectory()||["node_modules","dist"].includes(e.name))continue;const i=n.join(l,e.name);if(await m({rootDir:i,fileNames:c,mode:u}))return!0}return!1};return x=m}var S,C={name:"env-aligner",version:"1.0.0",description:"A developer-friendly tool for validating and aligning environment variables in .env files against schema files (e.g., .env.example). It helps identify missing variables, empty values, or extra entries, ensuring a consistent and error-free environment setup.",keywords:[".env",".env.example","dotenv","environment variables","check","align"],homepage:"https://github.com/ChungYingHo/env-aligner",bugs:{url:"https://github.com/ChungYingHo/env-aligner/issues"},repository:{type:"git",url:"https://github.com/ChungYingHo/env-aligner.git"},contributors:["Jeremy Ho <ag.cyho@gmail.com>(https://codefictionist.com/)","MJC <5iftisland@gmail.com>(https://github.com/JuiCheng)"],license:"MIT",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},dependencies:{commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"},files:["dist"],engines:{node:">=18.0.0"}};var F=function(){if(S)return w;S=1;const e=s.default,{program:n,Option:i}=a.default,r=N(),{version:t}=C,o=".env.example",l=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(t,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new i("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new i("-e, --env <env>","The env file to check, default is .env.").default(".env")).addOption(new i("-m, --missing <missing>","Check missing variables in the env file.").default(!0)).addOption(new i("-n, --empty <empty>","Check empty value variables in the env file.").default(!0)).addOption(new i("-x, --extra <extra>","Check extra variables in the env file.").default(!0)).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:m}=process.env,u=m||c,{schema:f=o,env:d=l,missing:p=!0,empty:v=!0,extra:g=!0}=n.opts();return r({rootDir:u,fileNames:{schemaName:f,envName:d},checkOptions:{isCheckMissing:JSON.parse(p),isCheckEmptyValue:JSON.parse(v),isCheckExtra:JSON.parse(g)}}),w}(),I=u(F);module.exports=I;
//# sourceMappingURL=cli.min.js.map
