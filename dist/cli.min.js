#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),i=require("fs"),s=require("path"),r=require("dotenv");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=t(e),l=t(n),o=t(i),c=t(s),v=t(r);function d(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var u,m,p={};function g(){if(m)return u;m=1;const e=o.default,n=c.default,i=v.default,s=a.default,r=process.cwd(),t={schemaName:".env.example",envName:".env"},l={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},d=n=>{const r=e.readFileSync(n,"utf8"),t=i.parse(r);return t||(console.error(s.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),t},p=async(i=r,a=t,o=l)=>{"use default"===i&&(i=r);const{schemaName:c,envName:v}=a,u=await e.promises.readdir(i,{withFileTypes:!0});await Promise.all(u.map((async r=>{const t=n.join(i,r.name);if(r.isDirectory()&&"node_modules"!==r.name&&"dist"!==r.name)await p(t,a,o);else if(r.isFile()&&r.name===c){const r=n.join(i,v);try{await e.promises.stat(r),((e,i,r)=>{const{isCheckMissing:t,isCheckEmptyValue:a,isCheckDuplicate:l,isCheckExtra:o}=r;t||a||l||o||console.log(s.hex("#ff69b4").inverse("You have disabled all checks, nothing to do."));const c=d(e),v=d(i),u=Object.keys(c),m=Object.keys(v),p=t?u.filter((e=>!m.includes(e))):[],g=a?u.filter((e=>c[e]&&!v[e]&&!p.includes(e))):[],h=o?m.filter((e=>!u.includes(e))):[],f=n.dirname(i);p.length>0&&(console.error(s.red.inverse(`\nMissing variables in ${f}`)),console.log(s.red(`${p.join("、")}`))),g.length>0&&(console.error(s.hex("#FFA500").inverse(`\nEmpty value variables in ${f}`)),console.log(s.hex("#FFA500")(`${g.join("、")}`))),h.length>0&&(console.error(s.blue.inverse(`\nExtra variables in ${f}`)),console.log(s.blue(`${h.join("、")}`))),p.length>0||g.length>0?process.exit(1):console.log(s.green.inverse(`\nAll variables in ${f} are correct!`))})(t,r,o)}catch(e){console.warn(s.yellow(`\nNo matching env file found for ${t}`))}}})))};return u=p}var h,f={name:"env-aligner",version:"1.0.0-beta",description:"A developer-friendly tool for validating and aligning environment variables in .env files against schema files (e.g., .env.example). It helps identify missing variables, empty values, or extra entries, ensuring a consistent and error-free environment setup.",keywords:[".env",".env.example","dotenv","environment variables","check","align"],homepage:"https://github.com/ChungYingHo/env-aligner",bugs:{url:"https://github.com/ChungYingHo/env-aligner/issues"},repository:{type:"git",url:"https://github.com/ChungYingHo/env-aligner.git"},contributors:["Jeremy Ho <ag.cyho@gmail.com>(https://codefictionist.com/)","MJC <5iftisland@gmail.com>(https://github.com/JuiCheng)"],license:"MIT",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},dependencies:{chalk:"^4.1.2",commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"},files:["dist"]};var b=function(){if(h)return p;h=1;const e=a.default,{program:n,Option:i}=l.default,s=g(),{version:r}=f,t=".env.example",o=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(r,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new i("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new i("-e, --env <env>","The env file to check, default is .env.").default(".env")).addOption(new i("-m, --missing <missing>","Check missing variables in the env file.").default(!0)).addOption(new i("-n, --empty <empty>","Check empty value variables in the env file.").default(!0)).addOption(new i("-x, --extra <extra>","Check extra variables in the env file.").default(!0)).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:v}=process.env,d=v||c,{schema:u=t,env:m=o,missing:b=!0,empty:x=!0,extra:y=!0}=n.opts();return s(d,{schemaName:u,envName:m},{isCheckMissing:JSON.parse(b),isCheckEmptyValue:JSON.parse(x),isCheckExtra:JSON.parse(y)}),p}(),x=d(b);module.exports=x;
//# sourceMappingURL=cli.min.js.map
