#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),i=require("fs"),r=require("path"),s=require("dotenv");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=o(e),a=o(n),l=o(i),c=o(r),d=o(s);function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var p,m,u={};function g(){if(m)return p;m=1;const e=l.default,n=c.default,i=d.default,r=t.default,s=process.cwd(),o={schemaName:".env.example",envName:".env"},a={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},v=n=>{const s=e.readFileSync(n,"utf8"),o=i.parse(s);return o||(console.error(r.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),o},u=(e,i,s)=>{const o={...a,...s};var t;t=o,["isCheckMissing","isCheckEmptyValue","isCheckExtra"].forEach((e=>{e in t||(console.error(r.red.inverse(`\nMissing required key: ${e}`)),process.exit(1)),"boolean"!=typeof t[e]&&(console.error(r.red.inverse(`\n${e} must be a boolean`)),process.exit(1))}));const{isCheckMissing:l,isCheckEmptyValue:c,isCheckExtra:d}=o;l||c||d||(console.log(r.hex("#ff69b4").inverse("You have disabled all checks, nothing to do.")),process.exit(0));const p=v(e),m=v(i),u=Object.keys(p),g=Object.keys(m),h=l?u.filter((e=>!g.includes(e))):[],f=c?u.filter((e=>p[e]&&!m[e]&&!h.includes(e))):[],x=d?g.filter((e=>!u.includes(e))):[],y=n.dirname(i);h.length>0&&(console.error(r.red.inverse(`\nMissing variables in ${y}`)),console.log(r.red(`${h.join("、")}`))),f.length>0&&(console.error(r.hex("#FFA500").inverse(`\nEmpty value variables in ${y}`)),console.log(r.hex("#FFA500")(`${f.join("、")}`))),x.length>0&&(console.error(r.blue.inverse(`\nExtra variables in ${y}`)),console.log(r.blue(`${x.join("、")}`))),h.length>0||f.length>0?process.exit(1):console.log(r.green.inverse(`\nAll variables in ${y} are correct!`))},g=async({rootDir:i=s,fileNames:t=o,checkOptions:l=a}={})=>{try{(await e.promises.stat(i)).isDirectory()||(console.error(r.inverse.red(`\nError: ${i} is not a directory.`)),process.exit(1))}catch(e){console.error(r.inverse.red(`\nError: ${i} does not exist or is not accessible.`)),process.exit(1)}const c={...o,...t};(e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(r.red.inverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(r.red.inverse(`\n${n} must be a string`)),process.exit(1))}))})(c);const{schemaName:d,envName:v}=c,p=await e.promises.readdir(i,{withFileTypes:!0});await Promise.all(p.map((async s=>{const o=n.join(i,s.name);if(s.isDirectory()&&"node_modules"!==s.name&&"dist"!==s.name)await g({rootDir:o,fileNames:t,checkOptions:l});else if(s.isFile()&&s.name===d){const s=n.join(i,v);try{await e.promises.stat(s),u(o,s,l)}catch(e){console.warn(r.inverse.yellow(`\nNo matching env file found for ${o} in same directory.`))}}})))};return p=g}var h,f={name:"env-aligner",version:"1.0.0-beta.1",description:"A developer-friendly tool for validating and aligning environment variables in .env files against schema files (e.g., .env.example). It helps identify missing variables, empty values, or extra entries, ensuring a consistent and error-free environment setup.",keywords:[".env",".env.example","dotenv","environment variables","check","align"],homepage:"https://github.com/ChungYingHo/env-aligner",bugs:{url:"https://github.com/ChungYingHo/env-aligner/issues"},repository:{type:"git",url:"https://github.com/ChungYingHo/env-aligner.git"},contributors:["Jeremy Ho <ag.cyho@gmail.com>(https://codefictionist.com/)","MJC <5iftisland@gmail.com>(https://github.com/JuiCheng)"],license:"MIT",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},dependencies:{chalk:"^4.1.2",commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"},files:["dist"]};var x=function(){if(h)return u;h=1;const e=t.default,{program:n,Option:i}=a.default,r=g(),{version:s}=f,o=".env.example",l=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(s,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new i("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new i("-e, --env <env>","The env file to check, default is .env.").default(".env")).addOption(new i("-m, --missing <missing>","Check missing variables in the env file.").default(!0)).addOption(new i("-n, --empty <empty>","Check empty value variables in the env file.").default(!0)).addOption(new i("-x, --extra <extra>","Check extra variables in the env file.").default(!0)).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:d}=process.env,v=d||c,{schema:p=o,env:m=l,missing:x=!0,empty:y=!0,extra:b=!0}=n.opts();return r({rootDir:v,fileNames:{schemaName:p,envName:m},checkOptions:{isCheckMissing:JSON.parse(x),isCheckEmptyValue:JSON.parse(y),isCheckExtra:JSON.parse(b)}}),u}(),y=v(x);module.exports=y;
//# sourceMappingURL=cli.min.js.map
