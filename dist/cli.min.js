#!/usr/bin/env node
"use strict";var e=require("commander"),n=require("fs"),i=require("path"),t=require("dotenv");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=r(e),s=r(n),a=r(i),l=r(t);function c(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var m,f,u,d,p,v,g,h,y,$,w={};function b(){if(f)return m;return f=1,m={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}function x(){if(d)return u;d=1;const e=s.default,n=l.default,i=b();return u={parseEnvFile:t=>{const r=e.readFileSync(t,"utf8"),o=n.parse(r);return o||(console.error(i.formatRedInverse(`\nFailed to parse ${t}`)),process.exit(1)),Object.keys(o).length||(console.error(i.formatRedInverse(`\n${t} is empty or has no valid variables.`)),process.exit(1)),o},fileExists:async function(n){try{return await e.promises.access(n,e.constants.F_OK),!0}catch{return!1}},validateFileNames:e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(i.formatRedInverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(i.formatRedInverse(`\n${n} must be a string`)),process.exit(1))}))},validateDirectory:async function(n){try{(await e.promises.stat(n)).isDirectory()||(console.error(i.formatRed(`[error] ${n} is not a directory.`)),process.exit(1))}catch(e){console.error(i.formatRed(`[error] Failed to access ${n}: ${e.message}`)),process.exit(1)}}}}function E(){if(v)return p;v=1;const e=s.default,n=l.default,i=a.default,t=b(),r=x(),o=async(o,s)=>{const a=e.readFileSync(o,"utf8"),l=n.parse(a),c=r.parseEnvFile(s),m=[],f=a.split(/\r?\n/);for(let e=0;e<f.length;e++){const n=f[e].trim();if(""===n){m.push("");continue}if(n.startsWith("#")){m.push(f[e]);continue}const i=n.indexOf("=");if(-1!==i){const e=n.slice(0,i).trim();if(e in l){const n=c[e]??"",i=n.includes("\n")?`"${n}"`:n;m.push(`${e}=${i}`)}}}await e.promises.writeFile(s,m.join("\n"),"utf8"),console.log(t.formatGreenInverse(`\nAligned ${i.basename(s)} with ${i.basename(o)}`))};return p={cloneSchemaToEnv:async(n,o,s)=>{const a=i.join(s,n),l=i.join(s,o);await r.fileExists(a)||(console.error(t.formatRedInverse(`\nSchema file ${n} does not exist in ${s}`)),process.exit(1)),await r.fileExists(l)?console.log(t.formatBlue(`\n${o} already exists in ${s}, skipping copy.`)):(await e.promises.copyFile(a,l),console.log(t.formatGreen(`\nCopied ${n} to ${o} in ${s}`)))},alignEnvWithSchema:o,checkEnvVariables:async(e,n,s,a)=>{const l=r.parseEnvFile(e),c=r.parseEnvFile(n),m=Object.keys(l),f=Object.keys(c),u=m.filter((e=>!f.includes(e))),d=m.filter((e=>{if(!f.includes(e)||u.includes(e))return!1;const n=c[e];if("string"!=typeof n)return!1;const i=n.startsWith('"')||n.startsWith("'"),t=n.trim();if(""===n&&("''"===l[e]||'""'===l[e]))return!1;return""===(i?t:t.split("#")[0].trim())})),p=s?f.filter((e=>!m.includes(e))):[],v=i.dirname(n);if(u.length>0&&(console.error(t.formatRedInverse(`\n[Missing Variables] in ${v}`)),console.log(t.formatRed(`→ ${u.join(", ")}`))),d.length>0&&(console.error(t.formatYellowInverse(`\n[Empty Variables] in ${v}`)),console.log(t.formatYellow(`→ ${d.join(", ")}`))),p.length>0&&(console.error(t.formatBlueInverse(`\n[Extra Variables] in ${v}`)),console.log(t.formatBlue(`→ ${p.join(", ")}`))),s&&a?await o(e,n):!s&&a&&console.warn(t.formatYellowInverse('\n[Warning] The "align" option can only be used in strict mode. Skipping alignment.')),u.length>0||d.length>0)process.exit(1);else{const e=`\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\n\n      ✅ All variables in: ${v}\n\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n    `;console.log(t.formatGreen(e))}}}}function j(){if(h)return g;h=1;const e=process.cwd(),n=".env.example",i=".env";return g={defaultDir:e,defaultSchemaFileName:n,defaultEnvFileName:i,defaultFiles:{schemaName:n,envName:i},defaultMode:{isStrict:!1,isAlign:!1}}}var F,S={name:"env-aligner",version:"2.0.0-beta.4",description:"A developer-friendly tool for validating and aligning environment variables in .env files against schema files (e.g., .env.example). It helps identify missing variables, empty values, or extra entries, ensuring a consistent and error-free environment setup.",keywords:[".env",".env.example","dotenv","environment variables","check","align"],homepage:"https://github.com/ChungYingHo/env-aligner",bugs:{url:"https://github.com/ChungYingHo/env-aligner/issues"},repository:{type:"git",url:"https://github.com/ChungYingHo/env-aligner.git"},contributors:["Jeremy Ho <ag.cyho@gmail.com>(https://codefictionist.com/)","MJC <5iftisland@gmail.com>(https://github.com/JuiCheng)"],license:"MIT",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},dependencies:{commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"},files:["dist"],engines:{node:">=18.0.0"}};var N=function(){if(F)return w;F=1;const{program:e,Option:n}=o.default,i=function(){if($)return y;$=1;const e=s.default,n=a.default,i=b(),t=x(),r=E(),{defaultDir:o,defaultFiles:l,defaultMode:c}=j(),m=async({rootDir:s=o,fileNames:a=l,mode:f=c,isClone:u=!1}={})=>{const d={...l,...a};t.validateFileNames(d);const{schemaName:p,envName:v}=d,{isStrict:g,isAlign:h}=f;if(await t.validateDirectory(s),u)return void(await r.cloneSchemaToEnv(p,v,s)&&console.log(i.formatGreen(`✅ env file created successfully in ${s}`)));const y=await e.promises.readdir(s,{withFileTypes:!0}),$=y.map((e=>e.name)),w=n.join(s,p),b=n.join(s,v);if($.includes(v)){const[e,n]=await Promise.all([t.fileExists(w),t.fileExists(b)]);if(e&&n)return r.checkEnvVariables(w,b,g,h),!0;console.log(i.formatBlue(`[info] Skipping check in ${s}, searching deeper...`))}for(const e of y){if(!e.isDirectory()||["node_modules","dist"].includes(e.name))continue;const i=n.join(s,e.name);if(await m({rootDir:i,fileNames:a,mode:f}))return!0}return!1};return y=m}(),{version:t}=S,r=b(),{defaultDir:l,defaultSchemaFileName:c,defaultEnvFileName:m}=j();e.name("env-aligner").description("A simple tool to align the env variables in the project").version(t,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(r.formatGreen("Env Aligner is working!"))})).addOption(new n("--dir <directory>","Root directory to scan.").default(l)).addOption(new n("--schema <schema>","Schema file name.").default(c)).addOption(new n("--env <env>","Env file name.").default(m)).addOption(new n("--strict","Enable strict mode: warn on extra variables.").default(!1)).addOption(new n("--align","Enable align mode: auto-fix env format (only works with --strict).").default(!1)).addOption(new n("--clone","Clone schema to env file if env does not exist.").default(!1)).addHelpText("after","\n    Examples:\n        $ env-aligner --dir ./apps/frontend\n        $ env-aligner\n        $ env-aligner --schema .env.example --env .env\n        $ env-aligner --schema .env.example\n        $ env-aligner --env .env\n        $ env-aligner --strict --align\n        $ env-aligner --clone\n    ").parse(process.argv);const f=e.opts();f.align&&!f.strict&&console.log(r.formatYellow("⚠️  Align mode (--align) only works when strict mode (--strict) is enabled. It will be ignored."));const u=f.strict,d=u&&f.align;return i({rootDir:f.dir,fileNames:{schemaName:f.schema,envName:f.env},mode:{isStrict:u,isAlign:d},isClone:f.clone}),w}(),I=c(N);module.exports=I;
//# sourceMappingURL=cli.min.js.map
