#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),r=require("fs"),t=require("path"),i=require("dotenv");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(e),a=o(n),l=o(r),c=o(t),m=o(i);function u(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var f,d,p,v,g={};function h(){if(d)return f;return d=1,f={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}function y(){if(v)return p;v=1;const e=l.default,n=c.default,r=m.default,t=h(),i=process.cwd(),o={schemaName:".env.example",envName:".env"},s=n=>{const i=e.readFileSync(n,"utf8"),o=r.parse(i);return o||(console.error(t.formatRedInverse(`\nFailed to parse ${n}`)),process.exit(1)),Object.keys(o).length||(console.error(t.formatRedInverse(`\n${n} is empty or has no valid variables.`)),process.exit(1)),o};async function a(n){try{return await e.promises.access(n,e.constants.F_OK),!0}catch{return!1}}const u=async({rootDir:r=i,fileNames:l=o}={})=>{const c={...o,...l};(e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(t.formatRedInverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(t.formatRedInverse(`\n${n} must be a string`)),process.exit(1))}))})(c);const{schemaName:m,envName:f}=c;try{(await e.promises.stat(r)).isDirectory()||(console.error(t.formatRed(`[error] ${r} is not a directory.`)),process.exit(1))}catch(e){console.error(t.formatRed(`[error] Failed to access ${r}: ${e.message}`)),process.exit(1)}const d=await e.promises.readdir(r,{withFileTypes:!0}),p=d.map((e=>e.name)),v=n.join(r,m),g=n.join(r,f);if(p.includes(f)){const[e,i]=await Promise.all([a(v),a(g)]);if(e&&i)return((e,r)=>{const i=s(e),o=s(r),a=Object.keys(i),l=Object.keys(o),c=a.filter((e=>!l.includes(e))),m=a.filter((e=>i[e]&&""===o[e]&&!c.includes(e))),u=l.filter((e=>!a.includes(e))),f=n.dirname(r);if(c.length>0&&(console.error(t.formatRedInverse(`\n[Missing Variables] in ${f}`)),console.log(t.formatRed(`→ ${c.join(", ")}`))),m.length>0&&(console.error(t.formatYellowInverse(`\n[Empty Variables] in ${f}`)),console.log(t.formatYellow(`→ ${m.join(", ")}`))),u.length>0&&(console.error(t.formatBlueInverse(`\n[Extra Variables] in ${f}`)),console.log(t.formatBlue(`→ ${u.join(", ")}`))),c.length>0||m.length>0)process.exit(1);else{const e=`\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\n\n      ✅ All variables in: ${f}\n\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n    `;console.log(t.formatGreen(e))}})(v,g),!0;console.log(t.formatBlue(`[info] Skipping check in ${r}, searching deeper...`))}for(const e of d)if(e.isDirectory()&&!["node_modules","dist"].includes(e.name)){const t=n.join(r,e.name);if(await u({rootDir:t,fileNames:l}))return!0}return!1};return p=u}var b,x={name:"env-aligner",version:"1.0.0",description:"A developer-friendly tool for validating and aligning environment variables in .env files against schema files (e.g., .env.example). It helps identify missing variables, empty values, or extra entries, ensuring a consistent and error-free environment setup.",keywords:[".env",".env.example","dotenv","environment variables","check","align"],homepage:"https://github.com/ChungYingHo/env-aligner",bugs:{url:"https://github.com/ChungYingHo/env-aligner/issues"},repository:{type:"git",url:"https://github.com/ChungYingHo/env-aligner.git"},contributors:["Jeremy Ho <ag.cyho@gmail.com>(https://codefictionist.com/)","MJC <5iftisland@gmail.com>(https://github.com/JuiCheng)"],license:"MIT",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},dependencies:{commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"},files:["dist"],engines:{node:">=18.0.0"}};var $=function(){if(b)return g;b=1;const e=s.default,{program:n,Option:r}=a.default,t=y(),{version:i}=x,o=".env.example",l=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(i,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new r("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new r("-e, --env <env>","The env file to check, default is .env.").default(".env")).addOption(new r("-m, --missing <missing>","Check missing variables in the env file.").default(!0)).addOption(new r("-n, --empty <empty>","Check empty value variables in the env file.").default(!0)).addOption(new r("-x, --extra <extra>","Check extra variables in the env file.").default(!0)).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:m}=process.env,u=m||c,{schema:f=o,env:d=l,missing:p=!0,empty:v=!0,extra:h=!0}=n.opts();return t({rootDir:u,fileNames:{schemaName:f,envName:d},checkOptions:{isCheckMissing:JSON.parse(p),isCheckEmptyValue:JSON.parse(v),isCheckExtra:JSON.parse(h)}}),g}(),w=u($);module.exports=w;
//# sourceMappingURL=cli.min.js.map
