"use strict";var e=require("fs"),n=require("path"),t=require("dotenv");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o,i,s,a,l,c,f,u,m,d,p=r(e),h=r(n),v=r(t);function $(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function g(){if(i)return o;return i=1,o={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}function y(){if(a)return s;a=1;const e=p.default,n=v.default,t=g();return s={parseEnvFile:r=>{const o=e.readFileSync(r,"utf8"),i=n.parse(o);return i||(console.error(t.formatRedInverse(`\nFailed to parse ${r}`)),process.exit(1)),Object.keys(i).length||(console.error(t.formatRedInverse(`\n${r} is empty or has no valid variables.`)),process.exit(1)),i},fileExists:async function(n){try{return await e.promises.access(n,e.constants.F_OK),!0}catch{return!1}},validateFileNames:e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(t.formatRedInverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(t.formatRedInverse(`\n${n} must be a string`)),process.exit(1))}))},validateDirectory:async function(n){try{(await e.promises.stat(n)).isDirectory()||(console.error(t.formatRed(`[error] ${n} is not a directory.`)),process.exit(1))}catch(e){console.error(t.formatRed(`[error] Failed to access ${n}: ${e.message}`)),process.exit(1)}}}}function w(){if(c)return l;c=1;const e=p.default,n=v.default,t=h.default,r=g(),o=y(),i=async(o,i)=>{const s=e.readFileSync(o,"utf8"),a=n.parse(s),l=e.readFileSync(i,"utf-8").split("\n"),c={};let f=null,u=[];for(const e of l){const n=e.trim();if(!n||n.startsWith("#"))continue;const t=n.indexOf("=");if(t>0&&"\\"!==n[t-1]){f&&(c[f]=u.join("\n"),u=[]);const e=n.slice(0,t).trim(),r=n.slice(t+1);f=e,u.push(r)}else f&&u.push(n)}f&&(c[f]=u.join("\n"));const m=[],d=s.split(/\r?\n/);for(const e of d){const n=e.trim();if(""===n){m.push("");continue}if(n.startsWith("#")){m.push(e);continue}const t=n.indexOf("=");if(-1!==t){const e=n.slice(0,t).trim();if(e in a){let n=c[e]??"";!n.includes("\n")||n.startsWith('"')||n.startsWith("'")||(console.log(r.formatYellow(`‚ÑπÔ∏è  Variable "${e}" has multi-line value. Automatically quoting to preserve it.`)),n=`"${n}"`),m.push(`${e}=${n}`)}}}await e.promises.writeFile(i,m.join("\n"),"utf8"),console.log(r.formatGreenInverse(`\nAligned ${t.basename(i)} with ${t.basename(o)}`))};return l={cloneSchemaToEnv:async(n,i,s)=>{const a=t.join(s,n),l=t.join(s,i);await o.fileExists(a)||(console.error(r.formatRedInverse(`\nSchema file ${n} does not exist in ${s}`)),process.exit(1)),await o.fileExists(l)?console.log(r.formatBlue(`\n${i} already exists in ${s}, skipping copy.`)):(await e.promises.copyFile(a,l),console.log(r.formatGreen(`\nCopied ${n} to ${i} in ${s}`)))},alignEnvWithSchema:i,checkEnvVariables:async(n,s,a,l)=>{const c=o.parseEnvFile(n),f=o.parseEnvFile(s),u=Object.keys(c),m=Object.keys(f),d=e.readFileSync(s,"utf-8").split("\n"),p={};for(const e of d){const n=e.trim();if(!n||n.startsWith("#")||!n.includes("="))continue;const[t,...r]=n.split("="),o=r.join("=").trim();p[t.trim()]=o}const h=u.filter((e=>!m.includes(e))),v=u.filter((e=>{if(!m.includes(e)||h.includes(e))return!1;const n=f[e];if("string"!=typeof n)return!1;const t=p[e]??"";if("''"===t||'""'===t)return!1;const r=n.startsWith('"')||n.startsWith("'"),o=n.trim();return""===(r?o:o.split("#")[0].trim())})),$=a?m.filter((e=>!u.includes(e))):[],g=t.dirname(s);if(h.length>0&&(console.error(r.formatRedInverse(`\n[Missing Variables] in ${g}`)),console.log(r.formatRed(`‚Üí ${h.join(", ")}`))),v.length>0&&(console.error(r.formatYellowInverse(`\n[Empty Variables] in ${g}`)),console.log(r.formatYellow(`‚Üí ${v.join(", ")}`))),$.length>0&&(console.error(r.formatBlueInverse(`\n[Extra Variables] in ${g}`)),console.log(r.formatBlue(`‚Üí ${$.join(", ")}`))),a&&l?await i(n,s):!a&&l&&console.log(r.formatYellow('\n[Warning] The "align" option can only be used in strict mode. Skipping alignment.')),h.length>0||v.length>0)process.exit(1);else{const e=`\n      ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n      üéâ SUCCESS! ENV CHECK PASSED üéâ\n\n      ‚úÖ All variables in: ${g}\n\n      ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n    `;console.log(r.formatGreen(e))}}}}var x=function(){if(d)return m;d=1;const e=p.default,n=h.default,t=g(),r=y(),o=w(),{defaultDir:i,defaultFiles:s,defaultMode:a}=function(){if(u)return f;u=1;const e=process.cwd(),n=".env.example",t=".env";return f={defaultDir:e,defaultSchemaFileName:n,defaultEnvFileName:t,defaultFiles:{schemaName:n,envName:t},defaultMode:{isStrict:!1,isAlign:!1}}}(),l=async({rootDir:c=i,fileNames:f=s,mode:u=a,isClone:m=!1}={})=>{const d={...s,...f};r.validateFileNames(d);const{schemaName:p,envName:h}=d,{isStrict:v,isAlign:$}=u;if(await r.validateDirectory(c),m){return void(await o.cloneSchemaToEnv(p,h,c)&&console.log(t.formatGreen(`‚úÖ env file created successfully in ${c}`)))}const g=await e.promises.readdir(c,{withFileTypes:!0}),y=g.map((e=>e.name)),w=n.join(c,p),x=n.join(c,h),E=f.envName!==s.envName,F=f.schemaName!==s.schemaName;if(y.includes(h)){const[e,n]=await Promise.all([r.fileExists(w),r.fileExists(x)]);if(e&&n)return o.checkEnvVariables(w,x,v,$),!0;console.log(t.formatBlue(`[info] Skipping check in ${c}, searching deeper...`))}for(const e of g){if(!e.isDirectory()||["node_modules","dist"].includes(e.name))continue;const t=n.join(c,e.name);if(await l({rootDir:t,fileNames:f,mode:u}))return!0}return(E||F)&&(console.error(t.formatRed(`\n‚ùå No matching env/schema file found for "${h}" or "${p}" under: ${c}`)),process.exit(1)),!1};return m=l}(),E=$(x);module.exports=E;
//# sourceMappingURL=index.min.js.map
