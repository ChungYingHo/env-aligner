#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),i=require("fs"),r=require("path"),s=require("dotenv");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var l=a(e),t=a(n),o=a(i),c=a(r),d=a(s);function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var p,u,m={};function h(){if(u)return p;u=1;const e=o.default,n=c.default,i=d.default,r=l.default,s=process.cwd(),a={schemaName:".env.example",envName:".env"},t={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},v=n=>{const s=e.readFileSync(n,"utf8"),a=i.parse(s);return a||(console.error(r.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),a},m=async(i=s,l=a,o=t)=>{"use default"===i&&(i=s);const{schemaName:c,envName:d}=l,p=await e.promises.readdir(i,{withFileTypes:!0});await Promise.all(p.map((async s=>{const a=n.join(i,s.name);if(s.isDirectory()&&"node_modules"!==s.name&&"dist"!==s.name)await m(a,l,o);else if(s.isFile()&&s.name===c){const s=n.join(i,d);try{await e.promises.stat(s),((e,i,s)=>{const{isCheckMissing:a,isCheckEmptyValue:l,isCheckDuplicate:t,isCheckExtra:o}=s;a||l||t||o||console.log(r.hex("#ff69b4").inverse("You have disabled all checks, nothing to do."));const c=v(e),d=v(i),p=Object.keys(c),u=Object.keys(d),m=a?p.filter((e=>!u.includes(e))):[],h=l?p.filter((e=>c[e]&&!d[e]&&!m.includes(e))):[],f=o?u.filter((e=>!p.includes(e))):[],g=n.dirname(i);m.length>0&&(console.error(r.red.inverse(`\nMissing variables in ${g}`)),console.log(r.red(`${m.join("、")}`))),h.length>0&&(console.error(r.hex("#FFA500").inverse(`\nEmpty value variables in ${g}`)),console.log(r.hex("#FFA500")(`${h.join("、")}`))),f.length>0&&(console.error(r.blue.inverse(`\nExtra variables in ${g}`)),console.log(r.blue(`${f.join("、")}`))),m.length>0||h.length>0?process.exit(1):console.log(r.green.inverse(`\nAll variables in ${g} are correct!`))})(a,s,o)}catch(e){console.warn(r.yellow(`\nNo matching env file found for ${a}`))}}})))};return p=m}var f,g={name:"env-aligner",version:"1.0.0",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},keywords:[],author:"",license:"ISC",description:"1. .env 缺少 .env.example 的變數時會叫\r 2. .env 變數缺值時會叫\r 3. .env 有重複變數時會叫\r 4. .env 有多餘變數時會叫",dependencies:{chalk:"^4.1.2",commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"}};var x=function(){if(f)return m;f=1;const e=l.default,{program:n,Option:i}=t.default,r=h(),{version:s}=g,a=".env.example",o=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(s,"-v","--version").showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new i("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new i("-e, --env <env>","The env file to check, default is .env.").default(".env")).addOption(new i("-m, --missing <missing>","Check missing variables in the env file.").default(!0)).addOption(new i("-n, --empty <empty>","Check empty value variables in the env file.").default(!0)).addOption(new i("-x, --extra <extra>","Check extra variables in the env file.").default(!0)).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:d}=process.env,v=d||c,{schema:p=a,env:u=o,missing:x=!0,empty:b=!0,extra:k=!0}=n.opts();return r(v,{schemaName:p,envName:u},{isCheckMissing:JSON.parse(x),isCheckEmptyValue:JSON.parse(b),isCheckExtra:JSON.parse(k)}),m}(),b=v(x);module.exports=b;
//# sourceMappingURL=cli.min.js.map
