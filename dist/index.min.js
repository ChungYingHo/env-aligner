"use strict";var e=require("fs"),r=require("path"),s=require("dotenv"),n=require("chalk");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i,t,a=o(e),c=o(r),l=o(s),d=o(n);function u(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var h=u(function(){if(t)return i;t=1;const e=a.default,r=c.default,s=l.default,n=d.default,o=process.cwd(),u={schemaName:".env.example",envName:".env"},h={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},p=r=>{const o=e.readFileSync(r,"utf8"),i=s.parse(o);return i||(console.error(n.red.inverse(`\nFailed to parse ${r}`)),process.exit(1)),i},f=(e,s,o)=>{const i={...h,...o};var t;t=i,["isCheckMissing","isCheckEmptyValue","isCheckExtra"].forEach((e=>{e in t||(console.error(n.red.inverse(`\nMissing required key: ${e}`)),process.exit(1)),"boolean"!=typeof t[e]&&(console.error(n.red.inverse(`\n${e} must be a boolean`)),process.exit(1))}));const{isCheckMissing:a,isCheckEmptyValue:c,isCheckExtra:l}=i;a||c||l||(console.log(n.hex("#ff69b4").inverse("You have disabled all checks, nothing to do.")),process.exit(0));const d=p(e),u=p(s),f=Object.keys(d),v=Object.keys(u),m=a?f.filter((e=>!v.includes(e))):[],y=c?f.filter((e=>d[e]&&!u[e]&&!m.includes(e))):[],$=l?v.filter((e=>!f.includes(e))):[],g=r.dirname(s);m.length>0&&(console.error(n.red.inverse(`\nMissing variables in ${g}`)),console.log(n.red(`${m.join("、")}`))),y.length>0&&(console.error(n.hex("#FFA500").inverse(`\nEmpty value variables in ${g}`)),console.log(n.hex("#FFA500")(`${y.join("、")}`))),$.length>0&&(console.error(n.blue.inverse(`\nExtra variables in ${g}`)),console.log(n.blue(`${$.join("、")}`))),m.length>0||y.length>0?process.exit(1):console.log(n.green.inverse(`\nAll variables in ${g} are correct!`))},v=async({rootDir:s=o,fileNames:i=u,checkOptions:t=h}={})=>{try{(await e.promises.stat(s)).isDirectory()||(console.error(n.inverse.red(`\nError: ${s} is not a directory.`)),process.exit(1))}catch(e){console.error(n.inverse.red(`\nError: ${s} does not exist or is not accessible.`)),process.exit(1)}const a={...u,...i};(e=>{["schemaName","envName"].forEach((r=>{r in e||(console.error(n.red.inverse(`\nMissing required key: ${r}`)),process.exit(1)),"string"!=typeof e[r]&&(console.error(n.red.inverse(`\n${r} must be a string`)),process.exit(1))}))})(a);const{schemaName:c,envName:l}=a,d=await e.promises.readdir(s,{withFileTypes:!0});let p=!0;await Promise.all(d.map((async o=>{const a=r.join(s,o.name);if(o.isDirectory()&&"node_modules"!==o.name&&"dist"!==o.name)await v({rootDir:a,fileNames:i,checkOptions:t});else if(o.isFile()&&p){p=!1;const o=r.join(s,c),i=r.join(s,l);let a=!1,d=!1;try{await e.promises.stat(o),a=!0}catch(e){a=!1}try{await e.promises.stat(i),d=!0}catch(e){d=!1}a&&d?f(o,i,t):a||d?a?d||console.warn(n.inverse.yellow(`\nCannot find ${l} in ${s}.`)):console.warn(n.inverse.yellow(`\nCannot find ${c} in ${s}.`)):console.warn(n.inverse.yellow(`\nCannot find ${c} and ${l} in ${s}.`))}})))};return i=v}());module.exports=h;
//# sourceMappingURL=index.min.js.map
