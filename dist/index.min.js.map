{"version":3,"file":"index.min.js","sources":["../src/lib/colorFormat.js","../src/lib/index.js?commonjs-entry","../src/lib/index.js"],"sourcesContent":["// 紅底白字\r\nfunction formatRedInverse (msg) {\r\n  return `\\x1b[41m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 紅字\r\nfunction formatRed (msg) {\r\n  return `\\x1b[31m${msg}\\x1b[0m`\r\n}\r\n\r\n// 黃底白字\r\nfunction formatYellowInverse (msg) {\r\n  return `\\x1b[43m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 黃字\r\nfunction formatYellow (msg) {\r\n  return `\\x1b[33m${msg}\\x1b[0m`\r\n}\r\n\r\n// 藍底白字\r\nfunction formatBlueInverse (msg) {\r\n  return `\\x1b[44m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 藍字\r\nfunction formatBlue (msg) {\r\n  return `\\x1b[34m${msg}\\x1b[0m`\r\n}\r\n\r\n// 綠底白字\r\nfunction formatGreenInverse (msg) {\r\n  return `\\x1b[42m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 綠字\r\nfunction formatGreen (msg) {\r\n  return `\\x1b[32m${msg}\\x1b[0m`\r\n}\r\n\r\nmodule.exports = {\r\n  formatRedInverse,\r\n  formatRed,\r\n  formatYellowInverse,\r\n  formatYellow,\r\n  formatBlueInverse,\r\n  formatBlue,\r\n  formatGreenInverse,\r\n  formatGreen\r\n}","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireLib } from \"C:\\\\Users\\\\User\\\\Desktop\\\\VScode\\\\env-aligner\\\\src\\\\lib\\\\index.js\";\nvar libExports = requireLib();\nexport { libExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(libExports);","const fs = require('fs')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst colorFormat = require('./colorFormat')\r\n\r\nconst defaultDir = process.cwd()\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultFiles = {\r\n  schemaName: defaultSchemaFileName,\r\n  envName: defaultEnvFileName\r\n}\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(colorFormat.formatRedInverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  if (!Object.keys(parsedContent).length) {\r\n    console.error(colorFormat.formatRedInverse(`\\n${filePath} is empty or has no valid variables.`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n/**\r\n * 這個函式會檢查 fileNames 物件是否有缺少必要的 key 或是 key 的值不是 string\r\n * @param {string} fileNames\r\n */\r\nconst validateFileNames = (fileNames) => {\r\n  const requiredKeys = ['schemaName', 'envName']\r\n\r\n  requiredKeys.forEach(key => {\r\n    if(!(key in fileNames)) {\r\n      console.error(colorFormat.formatRedInverse(`\\nMissing required key: ${key}`))\r\n      process.exit(1)\r\n    }\r\n\r\n    if (typeof fileNames[key] !== 'string') {\r\n      console.error(colorFormat.formatRedInverse(`\\n${key} must be a string`))\r\n      process.exit(1)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaPath\r\n * @param {string} envPath\r\n */\r\nconst checkEnvVariables = (schemaPath, envPath) => {\r\n  const schemaVars = parseEnvFile(schemaPath)\r\n  const envVars = parseEnvFile(envPath)\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = schemaKeys.filter(key => !envKeys.includes(key))\r\n  const emptyValueKeys = schemaKeys.filter(\r\n    key => schemaVars[key] && envVars[key] === '' && !missingKeys.includes(key)\r\n  )\r\n  const extraKeys = envKeys.filter(key => !schemaKeys.includes(key))\r\n\r\n  const envDir = path.dirname(envPath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(colorFormat.formatRedInverse(`\\n[Missing Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatRed(`→ ${missingKeys.join(', ')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(colorFormat.formatYellowInverse(`\\n[Empty Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatYellow(`→ ${emptyValueKeys.join(', ')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(colorFormat.formatBlueInverse(`\\n[Extra Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatBlue(`→ ${extraKeys.join(', ')}`))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 ) { \r\n    process.exit(1)\r\n  } else {\r\n    const msg = `\r\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\r\n\r\n      ✅ All variables in: ${envDir}\r\n\r\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n    `\r\n    console.log(colorFormat.formatGreen(msg))\r\n  }\r\n}\r\n\r\n/**\r\n * 檢查檔案是否存在\r\n * @param {string} targetPath\r\n * @returns {Promise<boolean>} 如果檔案存在則回傳 true，否則回傳 false\r\n */\r\nasync function fileExists (targetPath) {\r\n  try {\r\n    await fs.promises.access(targetPath, fs.constants.F_OK)\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 主程式，遞迴檢查目錄中的 env file 和 schema 檔案\r\n * 函式使用方式：\r\n * envAligner(rootDir, fileNames)\r\n * envAligner({fileNames: customFileNamesObject})\r\n * @param {string} rootDir 根目錄\r\n * @param {string} schemaFileName schema 檔案名稱\r\n * @param {string} envFileName env 檔案名稱\r\n */\r\n\r\nconst envAligner = async ({ rootDir = defaultDir, fileNames = defaultFiles } = {}) => {\r\n  const mergedFileNames = { ...defaultFiles, ...fileNames }\r\n  validateFileNames(mergedFileNames)\r\n\r\n  const { schemaName: schemaFileName, envName: envFileName } = mergedFileNames\r\n\r\n  // 確保目錄存在且為資料夾\r\n  try {\r\n    const rootStats = await fs.promises.stat(rootDir)\r\n    if (!rootStats.isDirectory()) {\r\n      console.error(colorFormat.formatRed(`[error] ${rootDir} is not a directory.`))\r\n      process.exit(1)\r\n    }\r\n  } catch (error) {\r\n    console.error(colorFormat.formatRed(`[error] Failed to access ${rootDir}: ${error.message}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  // 讀取目錄內容\r\n  const dirContents = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n  const directoryEntries = dirContents.map(entry => entry.name)\r\n\r\n  // 組合 schema 和 env 檔案的完整路徑\r\n  const schemaFilePath = path.join(rootDir, schemaFileName)\r\n  const envFilePath = path.join(rootDir, envFileName)\r\n\r\n  // 若有 .env 檔案，執行比對並停止遞迴\r\n  if (directoryEntries.includes(envFileName)) {\r\n    const [schemaExists, envExists] = await Promise.all([\r\n      fileExists(schemaFilePath),\r\n      fileExists(envFilePath)\r\n    ])\r\n\r\n    if (schemaExists && envExists) {\r\n      checkEnvVariables(schemaFilePath, envFilePath)\r\n\r\n      return true\r\n    } else {\r\n      console.log(\r\n        colorFormat.formatBlue(`[info] Skipping check in ${rootDir}, searching deeper...`)\r\n      )\r\n    }\r\n  }\r\n\r\n  // 否則遞迴檢查子目錄\r\n  for (const item of dirContents) {\r\n    if (item.isDirectory() && !['node_modules', 'dist'].includes(item.name)) {\r\n      const subDirPath = path.join(rootDir, item.name)\r\n      const isChecked = await envAligner({ rootDir: subDirPath, fileNames })\r\n      if (isChecked) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nmodule.exports = envAligner"],"names":["colorFormat","formatRedInverse","msg","formatRed","formatYellowInverse","formatYellow","formatBlueInverse","formatBlue","formatGreenInverse","formatGreen","libExports","fs","require$$0","path","require$$1","dotenv","require$$2","require$$3","defaultDir","process","cwd","defaultFiles","schemaName","envName","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","exit","Object","keys","length","async","fileExists","targetPath","promises","access","constants","F_OK","envAligner","rootDir","fileNames","mergedFileNames","forEach","key","validateFileNames","schemaFileName","envFileName","stat","isDirectory","message","dirContents","readdir","withFileTypes","directoryEntries","map","entry","name","schemaFilePath","join","envFilePath","includes","schemaExists","envExists","Promise","all","schemaPath","envPath","schemaVars","envVars","schemaKeys","envKeys","missingKeys","filter","emptyValueKeys","extraKeys","envDir","dirname","log","checkEnvVariables","item","subDirPath","lib","requireLib","index","getDefaultExportFromCjs"],"mappings":"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"}