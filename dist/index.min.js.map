{"version":3,"file":"index.min.js","sources":["../src/lib/index.js?commonjs-entry","../src/lib/index.js"],"sourcesContent":["import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireLib } from \"C:\\\\Users\\\\Chung-Ying\\\\Desktop\\\\env-aligner\\\\src\\\\lib\\\\index.js\";\nvar libExports = requireLib();\nexport { libExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(libExports);","const fs = require('fs')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst chalk = require('chalk')\r\n\r\nconst defaultDir = process.cwd()\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultFiles = {\r\n  schemaName: defaultSchemaFileName,\r\n  envName: defaultEnvFileName\r\n}\r\nconst defaultOptions = {\r\n  isCheckMissing: true,\r\n  isCheckEmptyValue: true,\r\n  isCheckExtra: true\r\n}\r\n\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(chalk.red.inverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaPath \r\n * @param {string} envPath \r\n */\r\nconst checkEnvVariables = (schemaPath, envPath, checkOptions) => {\r\n  const { isCheckMissing, isCheckEmptyValue, isCheckDuplicate, isCheckExtra } = checkOptions\r\n  if (!isCheckMissing && !isCheckEmptyValue && !isCheckDuplicate && !isCheckExtra) {\r\n    console.log(chalk.hex('#ff69b4').inverse('You have disabled all checks, nothing to do.'))\r\n  }\r\n\r\n  const schemaVars = parseEnvFile(schemaPath)\r\n  const envVars = parseEnvFile(envPath)\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = isCheckMissing ? schemaKeys.filter(key => !envKeys.includes(key)) : []\r\n  const emptyValueKeys = isCheckEmptyValue ? schemaKeys.filter(key => schemaVars[key] && !envVars[key] && !missingKeys.includes(key)) : []\r\n  const extraKeys = isCheckExtra ? envKeys.filter(key => !schemaKeys.includes(key)) : []\r\n\r\n  const envDir = path.dirname(envPath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(chalk.red.inverse(`\\nMissing variables in ${envDir}`))\r\n    console.log(chalk.red(`${missingKeys.join('、')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(chalk.hex('#FFA500').inverse(`\\nEmpty value variables in ${envDir}`))\r\n    console.log(chalk.hex('#FFA500')(`${emptyValueKeys.join('、')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(chalk.blue.inverse(`\\nExtra variables in ${envDir}`))\r\n    console.log(chalk.blue(`${extraKeys.join('、')}`))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 ) { \r\n    process.exit(1)\r\n  } else {\r\n    console.log(chalk.green.inverse(`\\nAll variables in ${envDir} are correct!`))\r\n  }\r\n}\r\n\r\n/**\r\n * 主程式，遞迴檢查目錄中的 env file 和 schema 檔案\r\n * 函式使用方式：\r\n * envAligner(rootDir, fileNames, checkOptions)\r\n * envAligner({fileNames: customFileNamesObject})\r\n * envAligner({checkOptions: customCheckOptionsObject})\r\n * @param {string} rootDir 根目錄\r\n * @param {string} schemaFileName schema 檔案名稱\r\n * @param {string} envFileName env 檔案名稱\r\n */\r\nconst envAligner = async (rootDir = defaultDir, fileNames = defaultFiles, checkOptions = defaultOptions) => {\r\n \r\n  if (rootDir === 'use default') {\r\n    rootDir = defaultDir\r\n  }\r\n  const { schemaName: schemaFileName, envName: envFileName } = fileNames\r\n\r\n  // 使用 fs.promises.readdir 來非同步列出目錄\r\n  const entries = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n\r\n  await Promise.all(entries.map(async (entry) => {\r\n    const entryPath = path.join(rootDir, entry.name) // 組合檔案或目錄的路徑\r\n\r\n    if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== 'dist' ) {\r\n      await envAligner(entryPath, fileNames, checkOptions) // 如果是目錄，遞迴調用 envAligner\r\n    } else if (entry.isFile() && entry.name === schemaFileName) {\r\n      const envFilePath = path.join(rootDir, envFileName)\r\n\r\n      try {\r\n        await fs.promises.stat(envFilePath)\r\n        checkEnvVariables(entryPath, envFilePath, checkOptions)\r\n      // eslint-disable-next-line no-unused-vars\r\n      } catch (error) {\r\n        console.warn(chalk.yellow(`\\nNo matching env file found for ${entryPath}`))\r\n      }\r\n    }\r\n  }))\r\n}\r\n\r\nmodule.exports = envAligner"],"names":["index","getDefaultExportFromCjs","fs","require$$0","path","require$$1","dotenv","require$$2","chalk","require$$3","defaultDir","process","cwd","defaultFiles","schemaName","envName","defaultOptions","isCheckMissing","isCheckEmptyValue","isCheckExtra","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","red","inverse","exit","envAligner","async","rootDir","fileNames","checkOptions","schemaFileName","envFileName","entries","promises","readdir","withFileTypes","Promise","all","map","entry","entryPath","join","name","isDirectory","isFile","envFilePath","stat","schemaPath","envPath","isCheckDuplicate","log","hex","schemaVars","envVars","schemaKeys","Object","keys","envKeys","missingKeys","filter","key","includes","emptyValueKeys","extraKeys","envDir","dirname","length","blue","green","checkEnvVariables","warn","yellow","lib","requireLib"],"mappings":"0SAEA,IAEAA,EAA4BC,+BCJ5B,MAAMC,EAAKC,EAAa,QAClBC,EAAOC,EAAe,QACtBC,EAASC,EAAiB,QAC1BC,EAAQC,EAAgB,QAExBC,EAAaC,QAAQC,MAGrBC,EAAe,CACnBC,WAH4B,eAI5BC,QAHyB,QAKrBC,EAAiB,CACrBC,gBAAgB,EAChBC,mBAAmB,EACnBC,cAAc,GASVC,EAAgBC,IACpB,MAAMC,EAAcpB,EAAGqB,aAAaF,EAAU,QACxCG,EAAgBlB,EAAOmB,MAAMH,GAOnC,OALKE,IACHE,QAAQC,MAAMnB,EAAMoB,IAAIC,QAAQ,qBAAqBR,MACrDV,QAAQmB,KAAK,IAGRN,GAyDHO,EAAaC,MAAOC,EAAUvB,EAAYwB,EAAYrB,EAAcsB,EAAenB,KAEvE,gBAAZiB,IACFA,EAAUvB,GAEZ,MAAQI,WAAYsB,EAAgBrB,QAASsB,GAAgBH,EAGvDI,QAAgBpC,EAAGqC,SAASC,QAAQP,EAAS,CAAEQ,eAAe,UAE9DC,QAAQC,IAAIL,EAAQM,KAAIZ,MAAOa,IACnC,MAAMC,EAAY1C,EAAK2C,KAAKd,EAASY,EAAMG,MAE3C,GAAIH,EAAMI,eAAgC,iBAAfJ,EAAMG,MAA0C,SAAfH,EAAMG,WAC1DjB,EAAWe,EAAWZ,EAAWC,QAClC,GAAIU,EAAMK,UAAYL,EAAMG,OAASZ,EAAgB,CAC1D,MAAMe,EAAc/C,EAAK2C,KAAKd,EAASI,GAEvC,UACQnC,EAAGqC,SAASa,KAAKD,GApEL,EAACE,EAAYC,EAASnB,KAC9C,MAAMlB,eAAEA,EAAcC,kBAAEA,EAAiBqC,iBAAEA,EAAgBpC,aAAEA,GAAiBgB,EACzElB,GAAmBC,GAAsBqC,GAAqBpC,GACjEO,QAAQ8B,IAAIhD,EAAMiD,IAAI,WAAW5B,QAAQ,iDAG3C,MAAM6B,EAAatC,EAAaiC,GAC1BM,EAAUvC,EAAakC,GACvBM,EAAaC,OAAOC,KAAKJ,GACzBK,EAAUF,OAAOC,KAAKH,GAEtBK,EAAc/C,EAAiB2C,EAAWK,QAAOC,IAAQH,EAAQI,SAASD,KAAQ,GAClFE,EAAiBlD,EAAoB0C,EAAWK,QAAOC,GAAOR,EAAWQ,KAASP,EAAQO,KAASF,EAAYG,SAASD,KAAQ,GAChIG,EAAYlD,EAAe4C,EAAQE,QAAOC,IAAQN,EAAWO,SAASD,KAAQ,GAE9EI,EAASlE,EAAKmE,QAAQjB,GAExBU,EAAYQ,OAAS,IACvB9C,QAAQC,MAAMnB,EAAMoB,IAAIC,QAAQ,0BAA0ByC,MAC1D5C,QAAQ8B,IAAIhD,EAAMoB,IAAI,GAAGoC,EAAYjB,KAAK,UAGxCqB,EAAeI,OAAS,IAC1B9C,QAAQC,MAAMnB,EAAMiD,IAAI,WAAW5B,QAAQ,8BAA8ByC,MACzE5C,QAAQ8B,IAAIhD,EAAMiD,IAAI,UAAVjD,CAAqB,GAAG4D,EAAerB,KAAK,UAGtDsB,EAAUG,OAAS,IACrB9C,QAAQC,MAAMnB,EAAMiE,KAAK5C,QAAQ,wBAAwByC,MACzD5C,QAAQ8B,IAAIhD,EAAMiE,KAAK,GAAGJ,EAAUtB,KAAK,UAGvCiB,EAAYQ,OAAS,GAAKJ,EAAeI,OAAS,EACpD7D,QAAQmB,KAAK,GAEbJ,QAAQ8B,IAAIhD,EAAMkE,MAAM7C,QAAQ,sBAAsByC,kBACvD,EAiCKK,CAAkB7B,EAAWK,EAAahB,EAE3C,CAAC,MAAOR,GACPD,QAAQkD,KAAKpE,EAAMqE,OAAO,oCAAoC/B,KAC/D,CACF,KACA,SAGLgC,EAAiB/C,EDrHAgD"}