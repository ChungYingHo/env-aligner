{"version":3,"file":"cli.min.js","sources":["../src/lib/index.js","../src/bin/cli.js?commonjs-entry","../src/bin/cli.js"],"sourcesContent":["const fs = require('fs')\r\nconst path = require('path')\r\nconst dotenv = require('dotenv')\r\nconst chalk = require('chalk')\r\n\r\nconst defaultDir = process.cwd()\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultFiles = {\r\n  schemaName: defaultSchemaFileName,\r\n  envName: defaultEnvFileName\r\n}\r\nconst defaultOptions = {\r\n  isCheckMissing: true,\r\n  isCheckEmptyValue: true,\r\n  isCheckExtra: true\r\n}\r\n\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(chalk.red.inverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n\r\n/**\r\n * 這個函式會檢查 options 物件是否有缺少必要的 key 或是 key 的值不是 boolean\r\n * @param {object} options \r\n */\r\nconst validateOptions = (options) => {\r\n  const requiredKeys = ['isCheckMissing', 'isCheckEmptyValue', 'isCheckExtra']\r\n\r\n  requiredKeys.forEach(key => {\r\n    if(!(key in options)) {\r\n      console.error(chalk.red.inverse(`\\nMissing required key: ${key}`)) // 這句沒意外應該都不會出現，如果出現表示 bug 出現\r\n      process.exit(1)\r\n    }\r\n\r\n    if (typeof options[key] !== 'boolean') {\r\n      console.error(chalk.red.inverse(`\\n${key} must be a boolean`))\r\n      process.exit(1)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 這個函式會檢查 fileNames 物件是否有缺少必要的 key 或是 key 的值不是 string\r\n * @param {string} fileNames \r\n */\r\nconst validateFileNames = (fileNames) => {\r\n  const requiredKeys = ['schemaName', 'envName']\r\n\r\n  requiredKeys.forEach(key => {\r\n    if(!(key in fileNames)) {\r\n      console.error(chalk.red.inverse(`\\nMissing required key: ${key}`)) // 這句沒意外應該都不會出現，如果出現表示 bug 出現\r\n      process.exit(1)\r\n    }\r\n\r\n    if (typeof fileNames[key] !== 'string') {\r\n      console.error(chalk.red.inverse(`\\n${key} must be a string`))\r\n      process.exit(1)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaPath \r\n * @param {string} envPath \r\n */\r\nconst checkEnvVariables = (schemaPath, envPath, checkOptions) => {\r\n  const mergedOptions = { ...defaultOptions, ...checkOptions }\r\n  validateOptions(mergedOptions)\r\n  const { isCheckMissing, isCheckEmptyValue, isCheckExtra } = mergedOptions\r\n\r\n  if (!isCheckMissing && !isCheckEmptyValue && !isCheckExtra) {\r\n    console.log(chalk.hex('#ff69b4').inverse('You have disabled all checks, nothing to do.'))\r\n    process.exit(0)\r\n  }\r\n\r\n  const schemaVars = parseEnvFile(schemaPath)\r\n  const envVars = parseEnvFile(envPath)\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = isCheckMissing ? schemaKeys.filter(key => !envKeys.includes(key)) : []\r\n  const emptyValueKeys = isCheckEmptyValue ? schemaKeys.filter(key => schemaVars[key] && !envVars[key] && !missingKeys.includes(key)) : []\r\n  const extraKeys = isCheckExtra ? envKeys.filter(key => !schemaKeys.includes(key)) : []\r\n\r\n  const envDir = path.dirname(envPath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(chalk.red.inverse(`\\nMissing variables in ${envDir}`))\r\n    console.log(chalk.red(`${missingKeys.join(', ')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(chalk.hex('#FFA500').inverse(`\\nEmpty value variables in ${envDir}`))\r\n    console.log(chalk.hex('#FFA500')(`${emptyValueKeys.join(', ')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(chalk.blue.inverse(`\\nExtra variables in ${envDir}`))\r\n    console.log(chalk.blue(`${extraKeys.join(', ')}`))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 ) { \r\n    process.exit(1)\r\n  } else {\r\n    console.log(chalk.green.inverse(`\\nAll variables in ${envDir} are correct!`))\r\n  }\r\n}\r\n\r\n/**\r\n * 主程式，遞迴檢查目錄中的 env file 和 schema 檔案\r\n * 函式使用方式：\r\n * envAligner(rootDir, fileNames, checkOptions)\r\n * envAligner({fileNames: customFileNamesObject})\r\n * envAligner({checkOptions: customCheckOptionsObject})\r\n * @param {string} rootDir 根目錄\r\n * @param {string} schemaFileName schema 檔案名稱\r\n * @param {string} envFileName env 檔案名稱\r\n */\r\n\r\nconst envAligner = async ({ rootDir = defaultDir, fileNames = defaultFiles, checkOptions = defaultOptions } = {}) => {\r\n  try {\r\n    // 檢查 rootDir 是否存在且是目錄\r\n    const stats = await fs.promises.stat(rootDir)\r\n    if (!stats.isDirectory()) {\r\n      console.error(chalk.inverse.red(`\\nError: ${rootDir} is not a directory.`))\r\n      process.exit(1)\r\n    }\r\n  // eslint-disable-next-line no-unused-vars\r\n  } catch (error) {\r\n    console.error(chalk.inverse.red(`\\nError: ${rootDir} does not exist or is not accessible.`))\r\n    process.exit(1)\r\n  }\r\n\r\n  const mergedFileNames = { ...defaultFiles, ...fileNames }\r\n  validateFileNames(mergedFileNames)\r\n  const { schemaName: schemaFileName, envName: envFileName } = mergedFileNames\r\n\r\n  // 使用 fs.promises.readdir 來非同步列出目錄\r\n  const entries = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n  let flag=true\r\n  await Promise.all(entries.map(async (entry) => {\r\n    const entryPath = path.join(rootDir, entry.name) // 組合檔案或目錄的路徑\r\n    if (entry.isDirectory() && entry.name !== 'node_modules' && entry.name !== 'dist' ) {\r\n      await envAligner({ rootDir: entryPath, fileNames, checkOptions }) // 如果是目錄，遞迴調用 envAligner\r\n    } else if (entry.isFile() && flag) {\r\n      flag=false // 同個資料夾，只執行一次檔案開啟動作\r\n\r\n      const schemaFilePath = path.join(rootDir, schemaFileName)\r\n      const envFilePath = path.join(rootDir, envFileName)\r\n\r\n      let schemaExists = false\r\n      let envExists = false\r\n      // 檢查 schemaFilePath 是否存在\r\n      try {\r\n        await fs.promises.stat(schemaFilePath)\r\n        schemaExists = true\r\n      // eslint-disable-next-line no-unused-vars\r\n      } catch (error) {\r\n        schemaExists = false\r\n      }\r\n\r\n      // 檢查 envFilePath 是否存在\r\n      try {\r\n        await fs.promises.stat(envFilePath)\r\n        envExists = true\r\n      // eslint-disable-next-line no-unused-vars\r\n      } catch (error) {\r\n        envExists = false\r\n      }\r\n      // 根據檢查結果輸出不同訊息\r\n      if (schemaExists && envExists) {\r\n        checkEnvVariables(schemaFilePath, envFilePath, checkOptions)\r\n      } else {\r\n        if (!schemaExists && !envExists) {\r\n          console.warn(chalk.inverse.yellow(`\\nCannot find ${schemaFileName} and ${envFileName} in ${rootDir}.`))\r\n        } else if (!schemaExists) {\r\n          console.warn(chalk.inverse.yellow(`\\nCannot find ${schemaFileName} in ${rootDir}.`))\r\n        } else if (!envExists) {\r\n          console.warn(chalk.inverse.yellow(`\\nCannot find ${envFileName} in ${rootDir}.`))\r\n        }\r\n      }\r\n    }\r\n  }))\r\n}\r\n\r\nmodule.exports = envAligner","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireCli } from \"C:\\\\Users\\\\user\\\\Desktop\\\\env-aligner\\\\src\\\\bin\\\\cli.js\";\nvar cliExports = requireCli();\nexport { cliExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(cliExports);","const chalk = require(\"chalk\")\r\nconst { program, Option } = require(\"commander\")\r\nconst envAligner = require(\"../lib\")\r\nconst { version } = require(\"../../package.json\")\r\n\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultDir = process.cwd()\r\n\r\n/**\r\n * 指令使用方式：\r\n * npx env-aligner -s .env.example -e .env\r\n * npx env-aligner -s .env.example\r\n * npx env-aligner -e .env\r\n * npx env-aligner\r\n * npx env-aligner -m false -n false -d false -x false\r\n */\r\nprogram\r\n  .name(\"env-aligner\")\r\n  .description(\"A tool to align the env variables in the project\")\r\n  .version(version, '-v', '--version')\r\n  .showSuggestionAfterError() // 顯示錯誤時的建議\r\n  .addHelpText('beforeAll', () => {\r\n    console.log(chalk.green('Env Aligner is working!'))\r\n  })\r\n  .addOption(new Option('-s, --schema <schema>', 'The schema file for environment variables, default is .env.example.').default('.env.example'))\r\n  .addOption(new Option('-e, --env <env>', 'The env file to check, default is .env.').default('.env'))\r\n  .addOption(new Option('-m, --missing <missing>', 'Check missing variables in the env file.').default(true))\r\n  .addOption(new Option('-n, --empty <empty>', 'Check empty value variables in the env file.').default(true))\r\n  .addOption(new Option('-x, --extra <extra>', 'Check extra variables in the env file.').default(true))\r\n  .addHelpText('after', \r\n    `\r\n    Examples:\r\n        $ env-aligner\r\n        $ env-aligner -s .env.example -e .env\r\n        $ env-aligner -s .env.example\r\n        $ env-aligner -e .env\r\n    `\r\n  )\r\n  .parse(process.argv)\r\n\r\n\r\n// 取得當前工作目錄\r\nconst { INIT_CWD } = process.env\r\nconst rootDir = INIT_CWD || defaultDir\r\n\r\n// 取得參數\r\nconst {\r\n  schema = defaultSchemaFileName,\r\n  env = defaultEnvFileName,\r\n  missing = true,\r\n  empty = true,\r\n  extra = true\r\n} = program.opts()\r\n\r\nconst customFileNames= {\r\n  schemaName: schema,\r\n  envName: env\r\n}\r\n\r\nconst customOptions = {\r\n  isCheckMissing: JSON.parse(missing),\r\n  isCheckEmptyValue: JSON.parse(empty),\r\n  isCheckExtra: JSON.parse(extra)\r\n}\r\n\r\n\r\n// 執行 envAligner\r\nenvAligner({ rootDir, fileNames: customFileNames, checkOptions: customOptions })\r\n"],"names":["fs","require$$0","path","require$$1","dotenv","require$$2","chalk","require$$3","defaultDir","process","cwd","defaultFiles","schemaName","envName","defaultOptions","isCheckMissing","isCheckEmptyValue","isCheckExtra","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","red","inverse","exit","checkEnvVariables","schemaPath","envPath","checkOptions","mergedOptions","options","forEach","key","log","hex","schemaVars","envVars","schemaKeys","Object","keys","envKeys","missingKeys","filter","includes","emptyValueKeys","extraKeys","envDir","dirname","length","join","blue","green","envAligner","async","rootDir","fileNames","promises","stat","isDirectory","mergedFileNames","validateFileNames","schemaFileName","envFileName","entries","readdir","withFileTypes","flag","Promise","all","map","entry","entryPath","name","isFile","schemaFilePath","envFilePath","schemaExists","envExists","warn","yellow","lib","cliExports","program","Option","version","defaultSchemaFileName","defaultEnvFileName","description","showSuggestionAfterError","addHelpText","addOption","default","argv","INIT_CWD","env","schema","missing","empty","extra","opts","JSON","requireCli","cli","getDefaultExportFromCjs"],"mappings":"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"}