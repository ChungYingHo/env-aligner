"use strict";var e=require("fs"),r=require("path"),s=require("dotenv"),o=require("chalk");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i,t,a=n(e),c=n(r),l=n(s),d=n(o);function u(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var h=u(function(){if(t)return i;t=1;const e=a.default,r=c.default,s=l.default,o=d.default,n=process.cwd(),u={schemaName:".env.example",envName:".env"},h={isCheckMissing:!0,isCheckEmptyValue:!0,isCheckExtra:!0},m=r=>{const n=e.readFileSync(r,"utf8"),i=s.parse(n);return i||(console.error(o.red.inverse(`\nFailed to parse ${r}`)),process.exit(1)),i},p=(e,s,n)=>{const i={...h,...n};var t;t=i,["isCheckMissing","isCheckEmptyValue","isCheckExtra"].forEach((e=>{e in t||(console.error(o.red.inverse(`\nMissing required key: ${e}`)),process.exit(1)),"boolean"!=typeof t[e]&&(console.error(o.red.inverse(`\n${e} must be a boolean`)),process.exit(1))}));const{isCheckMissing:a,isCheckEmptyValue:c,isCheckExtra:l}=i;a||c||l||(console.log(o.hex("#ff69b4").inverse("You have disabled all checks, nothing to do.")),process.exit(0));const d=m(e),u=m(s),p=Object.keys(d),f=Object.keys(u),v=a?p.filter((e=>!f.includes(e))):[],y=c?p.filter((e=>d[e]&&!u[e]&&!v.includes(e))):[],g=l?f.filter((e=>!p.includes(e))):[],x=r.dirname(s);v.length>0&&(console.error(o.red.inverse(`\nMissing variables in ${x}`)),console.log(o.red(`${v.join("、")}`))),y.length>0&&(console.error(o.hex("#FFA500").inverse(`\nEmpty value variables in ${x}`)),console.log(o.hex("#FFA500")(`${y.join("、")}`))),g.length>0&&(console.error(o.blue.inverse(`\nExtra variables in ${x}`)),console.log(o.blue(`${g.join("、")}`))),v.length>0||y.length>0?process.exit(1):console.log(o.green.inverse(`\nAll variables in ${x} are correct!`))},f=async({rootDir:s=n,fileNames:i=u,checkOptions:t=h}={})=>{try{(await e.promises.stat(s)).isDirectory()||(console.error(o.inverse.red(`\nError: ${s} is not a directory.`)),process.exit(1))}catch(e){console.error(o.inverse.red(`\nError: ${s} does not exist or is not accessible.`)),process.exit(1)}const a={...u,...i};(e=>{["schemaName","envName"].forEach((r=>{r in e||(console.error(o.red.inverse(`\nMissing required key: ${r}`)),process.exit(1)),"string"!=typeof e[r]&&(console.error(o.red.inverse(`\n${r} must be a string`)),process.exit(1))}))})(a);const{schemaName:c,envName:l}=a,d=await e.promises.readdir(s,{withFileTypes:!0});await Promise.all(d.map((async n=>{const a=r.join(s,n.name);if(n.isDirectory()&&"node_modules"!==n.name&&"dist"!==n.name)await f({rootDir:a,fileNames:i,checkOptions:t});else if(n.isFile()&&n.name===c){const n=r.join(s,l);try{await e.promises.stat(n),p(a,n,t)}catch(e){console.warn(o.inverse.yellow(`\nNo matching env file found for ${a} in same directory.`))}}})))};return i=f}());module.exports=h;
//# sourceMappingURL=index.min.js.map
