#!/usr/bin/env node
"use strict";var e=require("chalk"),n=require("commander"),r=require("fs"),l=require("path"),i=require("dotenv");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=o(e),t=o(n),a=o(r),c=o(l),d=o(i);function v(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var u,p,m={};function f(){if(p)return u;p=1;const e=a.default,n=c.default,r=d.default,l=s.default,i=process.cwd(),o=n=>{const i=e.readFileSync(n,"utf8"),o=r.parse(i);return o||(console.error(l.red.inverse(`\nFailed to parse ${n}`)),process.exit(1)),o},t=async(r=i,s=".env.example",a=".env")=>{const c=await e.promises.readdir(r,{withFileTypes:!0});await Promise.all(c.map((async i=>{const c=n.join(r,i.name);if(i.isDirectory()&&"node_modules"!==i.name&&"dist"!==i.name)await t(c,s,a);else if(i.isFile()&&i.name===s){const i=n.join(r,a);try{await e.promises.stat(i),((e,r)=>{const i=o(e),s=o(r),t=Object.keys(i),a=Object.keys(s),c=t.filter((e=>!a.includes(e))),d=t.filter((e=>i[e]&&!s[e]&&!c.includes(e))),v=a.filter(((e,n,r)=>r.indexOf(e)!==n)),u=a.filter((e=>!t.includes(e))),p=n.dirname(r);c.length>0&&(console.error(l.red.inverse(`\nMissing variables in ${p}`)),console.log(l.red(`${c.join("、")}`))),d.length>0&&(console.error(l.hex("#FFA500").inverse(`\nEmpty value variables in ${p}`)),console.log(l.hex("#FFA500")(`${d.join("、")}`))),v.length>0&&(console.error(l.yellow.inverse(`\nDuplicate variables in ${p}`)),console.log(l.yellow(`${v.join("、")}`))),u.length>0&&(console.error(l.blue.inverse(`\nExtra variables in ${p}`)),console.log(l.blue(`${u.join("、")}`))),c.length>0||d.length>0||v.length>0||u.length>0?process.exit(1):console.log(l.green.inverse(`\nAll variables in ${p} are correct!`))})(c,i)}catch(e){console.warn(l.yellow(`\nNo matching env file found for ${c}`))}}})))};return u=t}var g,h={name:"env-aligner",version:"1.0.0",main:"dist/index.min.js",bin:{"env-aligner":"dist/cli.min.js"},scripts:{test:'echo "Error: no test specified" && exit 1',dev:"rollup -c -w",build:"rmdir /s /q dist && rollup -c"},keywords:[],author:"",license:"ISC",description:"",dependencies:{chalk:"^4.1.2",commander:"^12.1.0",dotenv:"^16.4.5"},devDependencies:{"@eslint/js":"^9.15.0","@rollup/plugin-commonjs":"^28.0.1","@rollup/plugin-json":"^6.1.0",eslint:"^9.15.0",globals:"^15.12.0",rollup:"^2.79.2","rollup-plugin-terser":"^7.0.2"}};var w=function(){if(g)return m;g=1;const e=s.default,{program:n,Option:r}=t.default,l=f(),{version:i}=h,o=".env.example",a=".env",c=process.cwd();n.name("env-aligner").description("A tool to align the env variables in the project").version(i,"-v","--version").addHelpCommand(!1).showSuggestionAfterError().addHelpText("beforeAll",(()=>{console.log(e.green("Env Aligner is working!"))})).addOption(new r("-s, --schema <schema>","The schema file for environment variables, default is .env.example.").default(".env.example")).addOption(new r("-e, --env <env>","The env file to check, default is .env.").default(".env")).addHelpText("after","\n    Examples:\n        $ env-aligner\n        $ env-aligner -s .env.example -e .env\n        $ env-aligner -s .env.example\n        $ env-aligner -e .env\n    ").parse(process.argv);const{INIT_CWD:d}=process.env,v=d||c,{schemaFileName:u=o,envFileName:p=a}=n.opts();return l(v,u,p),m}(),x=v(w);module.exports=x;
//# sourceMappingURL=cli.min.js.map
