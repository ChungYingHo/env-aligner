"use strict";var e=require("fs"),r=require("path"),n=require("dotenv");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t,s,i,a,c=o(e),l=o(r),m=o(n);function f(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function u(){if(s)return t;return s=1,t={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}var d=function(){if(a)return i;a=1;const e=c.default,r=l.default,n=m.default,o=u(),t=process.cwd(),s={schemaName:".env.example",envName:".env"},f=r=>{const t=e.readFileSync(r,"utf8"),s=n.parse(t);return s||(console.error(o.formatRedInverse(`\nFailed to parse ${r}`)),process.exit(1)),Object.keys(s).length||(console.error(o.formatRedInverse(`\n${r} is empty or has no valid variables.`)),process.exit(1)),s};async function d(r){try{return await e.promises.access(r,e.constants.F_OK),!0}catch{return!1}}const p=async({rootDir:n=t,fileNames:i=s}={})=>{const a={...s,...i};(e=>{["schemaName","envName"].forEach((r=>{r in e||(console.error(o.formatRedInverse(`\nMissing required key: ${r}`)),process.exit(1)),"string"!=typeof e[r]&&(console.error(o.formatRedInverse(`\n${r} must be a string`)),process.exit(1))}))})(a);const{schemaName:c,envName:l}=a;try{(await e.promises.stat(n)).isDirectory()||(console.error(o.formatRed(`[error] ${n} is not a directory.`)),process.exit(1))}catch(e){console.error(o.formatRed(`[error] Failed to access ${n}: ${e.message}`)),process.exit(1)}const m=await e.promises.readdir(n,{withFileTypes:!0}),u=m.map((e=>e.name)),v=r.join(n,c),$=r.join(n,l);if(u.includes(l)){const[e,t]=await Promise.all([d(v),d($)]);if(e&&t)return((e,n)=>{const t=f(e),s=f(n),i=Object.keys(t),a=Object.keys(s),c=i.filter((e=>!a.includes(e))),l=i.filter((e=>t[e]&&""===s[e]&&!c.includes(e))),m=a.filter((e=>!i.includes(e))),u=r.dirname(n);if(c.length>0&&(console.error(o.formatRedInverse(`\n[Missing Variables] in ${u}`)),console.log(o.formatRed(`→ ${c.join(", ")}`))),l.length>0&&(console.error(o.formatYellowInverse(`\n[Empty Variables] in ${u}`)),console.log(o.formatYellow(`→ ${l.join(", ")}`))),m.length>0&&(console.error(o.formatBlueInverse(`\n[Extra Variables] in ${u}`)),console.log(o.formatBlue(`→ ${m.join(", ")}`))),c.length>0||l.length>0)process.exit(1);else{const e=`\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\n\n      ✅ All variables in: ${u}\n\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n    `;console.log(o.formatGreen(e))}})(v,$),!0;console.log(o.formatBlue(`[info] Skipping check in ${n}, searching deeper...`))}for(const e of m)if(e.isDirectory()&&!["node_modules","dist"].includes(e.name)){const o=r.join(n,e.name);if(await p({rootDir:o,fileNames:i}))return!0}return!1};return i=p}(),p=f(d);module.exports=p;
//# sourceMappingURL=index.min.js.map
