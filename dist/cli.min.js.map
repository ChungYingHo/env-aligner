{"version":3,"file":"cli.min.js","sources":["../src/lib/colorFormat.js","../src/lib/fileReader.js","../src/lib/envHandler.js","../src/constant/default.js","../src/bin/cli.js?commonjs-entry","../src/bin/cli.js","../src/lib/index.js"],"sourcesContent":["// 紅底白字\r\nfunction formatRedInverse (msg) {\r\n  return `\\x1b[41m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 紅字\r\nfunction formatRed (msg) {\r\n  return `\\x1b[31m${msg}\\x1b[0m`\r\n}\r\n\r\n// 黃底白字\r\nfunction formatYellowInverse (msg) {\r\n  return `\\x1b[43m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 黃字\r\nfunction formatYellow (msg) {\r\n  return `\\x1b[33m${msg}\\x1b[0m`\r\n}\r\n\r\n// 藍底白字\r\nfunction formatBlueInverse (msg) {\r\n  return `\\x1b[44m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 藍字\r\nfunction formatBlue (msg) {\r\n  return `\\x1b[34m${msg}\\x1b[0m`\r\n}\r\n\r\n// 綠底白字\r\nfunction formatGreenInverse (msg) {\r\n  return `\\x1b[42m\\x1b[37m${msg}\\x1b[0m`\r\n}\r\n\r\n// 綠字\r\nfunction formatGreen (msg) {\r\n  return `\\x1b[32m${msg}\\x1b[0m`\r\n}\r\n\r\nmodule.exports = {\r\n  formatRedInverse,\r\n  formatRed,\r\n  formatYellowInverse,\r\n  formatYellow,\r\n  formatBlueInverse,\r\n  formatBlue,\r\n  formatGreenInverse,\r\n  formatGreen\r\n}","const fs = require('fs')\r\nconst dotenv = require('dotenv')\r\nconst colorFormat = require('./colorFormat')\r\n\r\n/**\r\n * 解析環境變數\r\n * @param {string} filePath\r\n * @returns 應回傳一個物件，包含了檔案中的環境變數\r\n */\r\nconst parseEnvFile = (filePath) => {\r\n  const fileContent = fs.readFileSync(filePath, 'utf8')\r\n  const parsedContent = dotenv.parse(fileContent)\r\n\r\n  if (!parsedContent) {\r\n    console.error(colorFormat.formatRedInverse(`\\nFailed to parse ${filePath}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  if (!Object.keys(parsedContent).length) {\r\n    console.error(colorFormat.formatRedInverse(`\\n${filePath} is empty or has no valid variables.`))\r\n    process.exit(1)\r\n  }\r\n\r\n  return parsedContent\r\n}\r\n\r\n/**\r\n * 檢查檔案是否存在\r\n * @param {string} targetPath\r\n * @returns {Promise<boolean>} 如果檔案存在則回傳 true，否則回傳 false\r\n */\r\nasync function fileExists (targetPath) {\r\n  try {\r\n    await fs.promises.access(targetPath, fs.constants.F_OK)\r\n    return true\r\n  } catch {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * 這個函式會檢查 fileNames 物件是否有缺少必要的 key 或是 key 的值不是 string\r\n * @param {string} fileNames\r\n */\r\nconst validateFileNames = (fileNames) => {\r\n  const requiredKeys = ['schemaName', 'envName']\r\n\r\n  requiredKeys.forEach(key => {\r\n    if(!(key in fileNames)) {\r\n      console.error(colorFormat.formatRedInverse(`\\nMissing required key: ${key}`))\r\n      process.exit(1)\r\n    }\r\n\r\n    if (typeof fileNames[key] !== 'string') {\r\n      console.error(colorFormat.formatRedInverse(`\\n${key} must be a string`))\r\n      process.exit(1)\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * 驗證指定路徑是否為有效資料夾\r\n * @param {string} dirPath - 要驗證的目錄路徑\r\n */\r\nasync function validateDirectory (dirPath) {\r\n  try {\r\n    const stats = await fs.promises.stat(dirPath)\r\n    if (!stats.isDirectory()) {\r\n      console.error(colorFormat.formatRed(`[error] ${dirPath} is not a directory.`))\r\n      process.exit(1)\r\n    }\r\n  } catch (error) {\r\n    console.error(colorFormat.formatRed(`[error] Failed to access ${dirPath}: ${error.message}`))\r\n    process.exit(1)\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n  parseEnvFile,\r\n  fileExists,\r\n  validateFileNames,\r\n  validateDirectory\r\n}","const fs = require('fs')\r\nconst dotenv = require('dotenv')\r\nconst path = require('path')\r\nconst colorFormat = require('./colorFormat')\r\nconst fileReader = require('./fileReader')\r\n/**\r\n * 從 schema 複製出 .env 檔案（如果不存在）\r\n * @param {string} rootDir 資料夾路徑\r\n * @param {string} schemaFileName schema 檔案名稱（預設 .env.example）\r\n * @param {string} envFileName 要產出的 .env 檔名（預設 .env）\r\n */\r\n\r\nconst cloneSchemaToEnv = async (schemaFileName, envFileName, rootDir) => {\r\n  const schemaFilePath = path.join(rootDir, schemaFileName)\r\n  const envFilePath = path.join(rootDir, envFileName)\r\n\r\n  // 檢查 schema 檔案是否存在\r\n  if (!(await fileReader.fileExists(schemaFilePath))) {\r\n    console.error(colorFormat.formatRedInverse(`\\nSchema file ${schemaFileName} does not exist in ${rootDir}`))\r\n    process.exit(1)\r\n  }\r\n\r\n  // 如果 .env 檔案不存在，則複製 schema 檔案到 .env\r\n  if (!(await fileReader.fileExists(envFilePath))) {\r\n    await fs.promises.copyFile(schemaFilePath, envFilePath)\r\n    console.log(colorFormat.formatGreen(`\\nCopied ${schemaFileName} to ${envFileName} in ${rootDir}`))\r\n  } else {\r\n    console.log(colorFormat.formatBlue(`\\n${envFileName} already exists in ${rootDir}, skipping copy.`))\r\n  }\r\n}\r\n\r\n/**\r\n * 根據 schema 對齊 .env 檔案的格式與變數順序\r\n * 支援多行變數值（例如憑證）\r\n */\r\nconst alignEnvWithSchema = async (schemaFilePath, envFilePath) => {\r\n  const schemaRaw = fs.readFileSync(schemaFilePath, 'utf8')\r\n  const schemaVars = dotenv.parse(schemaRaw)\r\n  const envVars = fileReader.parseEnvFile(envFilePath)\r\n\r\n  const outputLines = []\r\n  const lineBuffer = schemaRaw.split(/\\r?\\n/)\r\n\r\n  for (let i = 0; i < lineBuffer.length; i++) {\r\n    const line = lineBuffer[i].trim()\r\n\r\n    // 空行\r\n    if (line === '') {\r\n      outputLines.push('')\r\n      continue\r\n    }\r\n\r\n    // 註解\r\n    if (line.startsWith('#')) {\r\n      outputLines.push(lineBuffer[i])\r\n      continue\r\n    }\r\n\r\n    // 判斷是不是新的變數宣告\r\n    const equalIndex = line.indexOf('=')\r\n    if (equalIndex !== -1) {\r\n      const key = line.slice(0, equalIndex).trim()\r\n\r\n      if (key in schemaVars) {\r\n        const value = envVars[key] ?? ''\r\n        const quoted = value.includes('\\n') ? `\"${value}\"` : value\r\n        outputLines.push(`${key}=${quoted}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  await fs.promises.writeFile(envFilePath, outputLines.join('\\n'), 'utf8')\r\n\r\n  console.log(colorFormat.formatGreenInverse(`\\nAligned ${path.basename(envFilePath)} with ${path.basename(schemaFilePath)}`))\r\n}\r\n\r\n/**\r\n * 會檢查 schema 檔案中的變數是否都有在 env 檔案中出現\r\n * @param {string} schemaFilePath\r\n * @param {string} envFilePath\r\n */\r\nconst checkEnvVariables = async (schemaFilePath, envFilePath, isStrict, isAlign) => {\r\n  const schemaVars = fileReader.parseEnvFile(schemaFilePath)\r\n  const envVars = fileReader.parseEnvFile(envFilePath)\r\n  const schemaKeys = Object.keys(schemaVars)\r\n  const envKeys = Object.keys(envVars)\r\n\r\n  const missingKeys = schemaKeys.filter(key => !envKeys.includes(key))\r\n  const emptyValueKeys = schemaKeys.filter(\r\n    key => {\r\n      if (!envKeys.includes(key) || missingKeys.includes(key)) return false\r\n\r\n      const rawValue = envVars[key]\r\n      if (typeof rawValue !== 'string') return false\r\n\r\n      const isQuoted = rawValue.startsWith('\"') || rawValue.startsWith(\"'\")\r\n      const trimmed = rawValue.trim()\r\n\r\n      // 若實際值為空字串，且 example 明寫的是 '' 或 \"\"，就視為有填\r\n      if (rawValue === '' && (schemaVars[key] === \"''\" || schemaVars[key] === '\"\"')) return false\r\n\r\n      const valueWithoutComment = !isQuoted\r\n        ? trimmed.split('#')[0].trim()\r\n        : trimmed\r\n\r\n      return valueWithoutComment === ''\r\n    }\r\n  )\r\n\r\n\r\n  const extraKeys = isStrict ? envKeys.filter(key => !schemaKeys.includes(key)) : []\r\n\r\n  const envDir = path.dirname(envFilePath)\r\n\r\n  if (missingKeys.length > 0) {\r\n    console.error(colorFormat.formatRedInverse(`\\n[Missing Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatRed(`→ ${missingKeys.join(', ')}`))\r\n  }\r\n\r\n  if (emptyValueKeys.length > 0) {\r\n    console.error(colorFormat.formatYellowInverse(`\\n[Empty Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatYellow(`→ ${emptyValueKeys.join(', ')}`))\r\n  }\r\n\r\n  if (extraKeys.length > 0) {\r\n    console.error(colorFormat.formatBlueInverse(`\\n[Extra Variables] in ${envDir}`))\r\n    console.log(colorFormat.formatBlue(`→ ${extraKeys.join(', ')}`))\r\n  }\r\n\r\n  if (isStrict && isAlign) {\r\n    await alignEnvWithSchema(schemaFilePath, envFilePath)\r\n  } else if (!isStrict && isAlign) {\r\n    console.warn(colorFormat.formatYellowInverse(\r\n      `\\n[Warning] The \"align\" option can only be used in strict mode. Skipping alignment.`\r\n    ))\r\n  }\r\n\r\n  if (missingKeys.length > 0 || emptyValueKeys.length > 0 ) { \r\n    process.exit(1)\r\n  } else {\r\n    const msg = `\r\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\r\n\r\n      ✅ All variables in: ${envDir}\r\n\r\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\r\n    `\r\n    console.log(colorFormat.formatGreen(msg))\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  cloneSchemaToEnv,\r\n  alignEnvWithSchema,\r\n  checkEnvVariables\r\n}","const defaultDir = process.cwd()\r\nconst defaultSchemaFileName = '.env.example'\r\nconst defaultEnvFileName = '.env'\r\nconst defaultFiles = {\r\n  schemaName: defaultSchemaFileName,\r\n  envName: defaultEnvFileName\r\n}\r\nconst defaultMode = {\r\n  isStrict: false,\r\n  isAlign: false\r\n}\r\n\r\nmodule.exports = {\r\n  defaultDir,\r\n  defaultSchemaFileName,\r\n  defaultEnvFileName,\r\n  defaultFiles,\r\n  defaultMode\r\n}","import { getDefaultExportFromCjs } from \"\u0000commonjsHelpers.js\";\nimport { __require as requireCli } from \"C:\\\\Users\\\\User\\\\Desktop\\\\VScode\\\\env-aligner\\\\src\\\\bin\\\\cli.js\";\nvar cliExports = requireCli();\nexport { cliExports as __moduleExports };\nexport default /*@__PURE__*/getDefaultExportFromCjs(cliExports);","const { program, Option } = require(\"commander\")\r\nconst envAligner = require(\"../lib\")\r\nconst { version } = require(\"../../package.json\")\r\nconst colorFormat = require(\"../lib/colorFormat\")\r\nconst { defaultDir, defaultSchemaFileName, defaultEnvFileName } = require(\"../constant/default\")\r\n\r\n/**\r\n * 指令使用方式：\r\n * npx env-aligner -s .env.example -e .env\r\n * npx env-aligner -s .env.example\r\n * npx env-aligner -e .env\r\n * npx env-aligner\r\n * npx env-aligner -m false -n false -d false -x false\r\n */\r\nprogram\r\n  .name(\"env-aligner\")\r\n  .description(\"A simple tool to align the env variables in the project\")\r\n  .version(version, '-v', '--version')\r\n  .showSuggestionAfterError() // 顯示錯誤時的建議\r\n  .addHelpText('beforeAll', () => {\r\n    console.log(colorFormat.formatGreen('Env Aligner is working!'))\r\n  })\r\n  .addOption(\r\n    new Option('--dir <directory>', 'Root directory to scan.').default(defaultDir)\r\n  )\r\n  .addOption(\r\n    new Option('--schema <schema>', 'Schema file name.').default(defaultSchemaFileName)\r\n  )\r\n  .addOption(\r\n    new Option('--env <env>', 'Env file name.').default(defaultEnvFileName)\r\n  )\r\n  .addOption(\r\n    new Option('--strict', 'Enable strict mode: warn on extra variables.').default(false)\r\n  )\r\n  .addOption(\r\n    new Option('--align', 'Enable align mode: auto-fix env format (only works with --strict).').default(false)\r\n  )\r\n  .addOption(\r\n    new Option('--clone', 'Clone schema to env file if env does not exist.').default(false)\r\n  )\r\n  .addHelpText('after',\r\n    `\r\n    Examples:\r\n        $ env-aligner --dir ./apps/frontend\r\n        $ env-aligner\r\n        $ env-aligner --schema .env.example --env .env\r\n        $ env-aligner --schema .env.example\r\n        $ env-aligner --env .env\r\n        $ env-aligner --strict --align\r\n        $ env-aligner --clone\r\n    `\r\n  )\r\n  .parse(process.argv)\r\n\r\n// 取得參數\r\nconst opts = program.opts()\r\n\r\n// align 被啟用但 strict 沒開\r\nif (opts.align && !opts.strict) {\r\n  console.log(colorFormat.formatYellow('⚠️  Align mode (--align) only works when strict mode (--strict) is enabled. It will be ignored.'))\r\n}\r\n\r\n// 強制 align 僅在 strict 為 true 時生效\r\nconst isStrict = opts.strict\r\nconst isAlign = isStrict && opts.align\r\n\r\n// 執行主邏輯\r\nenvAligner({\r\n  rootDir: opts.dir,\r\n  fileNames: {\r\n    schemaName: opts.schema,\r\n    envName: opts.env\r\n  },\r\n  mode: {\r\n    isStrict,\r\n    isAlign\r\n  },\r\n  isClone: opts.clone\r\n})","const fs = require('fs')\r\nconst path = require('path')\r\nconst colorFormat = require('./colorFormat')\r\nconst fileReader = require('./fileReader')\r\nconst envHandler = require('./envHandler')\r\nconst { defaultDir, defaultFiles, defaultMode } = require('../constant/default')\r\n\r\n/**\r\n * envAligner：主程式入口，用於驗證或建立各資料夾中的 .env 檔案。\r\n * \r\n * 支援功能：\r\n * 1. 遞迴檢查指定目錄與子目錄下的 `.env` 與 schema（預設為 `.env.example`）\r\n * 2. 可啟用嚴格模式（isStrict）檢查多餘變數\r\n * 3. 可啟用對齊模式（isAlign）自動修正 .env 格式\r\n * 4. 可啟用複製模式（isClone）從 schema 建立 .env 檔案（若不存在）\r\n * \r\n * @param {Object} options\r\n * @param {string} [options.rootDir] - 根目錄路徑，預設為 process.cwd()\r\n * @param {Object} [options.fileNames] - 自定義檔名（例如 `{ schemaName: '.env.example', envName: '.env' }`）\r\n * @param {Object} [options.mode] - 模式控制物件 `{ isStrict?: boolean, isAlign?: boolean }`\r\n * @param {boolean} [options.isClone] - 是否為複製模式，預設為 false\r\n * \r\n * @returns {Promise<boolean>} - 若成功完成檢查或建立，回傳 true，否則遞迴至下一層\r\n */\r\n\r\nconst envAligner = async ({\r\n  rootDir = defaultDir,\r\n  fileNames = defaultFiles,\r\n  mode = defaultMode,\r\n  isClone = false\r\n} = {}) => {\r\n\r\n  const mergedFileNames = { ...defaultFiles, ...fileNames }\r\n  // 檢查檔案名稱是否正確\r\n  fileReader.validateFileNames(mergedFileNames)\r\n\r\n  const { schemaName: schemaFileName, envName: envFileName } = mergedFileNames\r\n  const { isStrict, isAlign } = mode\r\n\r\n  // 確保目錄存在且為資料夾\r\n  await fileReader.validateDirectory(rootDir)\r\n\r\n  // 若 isClone 為 true，則嘗試複製 schema 檔案到 env 檔案\r\n  if (isClone) {\r\n    const didClone = await envHandler.cloneSchemaToEnv(schemaFileName, envFileName, rootDir)\r\n    if (didClone) {\r\n      console.log(colorFormat.formatGreen(`✅ env file created successfully in ${rootDir}`))\r\n    }\r\n    return\r\n  }\r\n\r\n  // 讀取目錄內容\r\n  const dirContents = await fs.promises.readdir(rootDir, { withFileTypes: true })\r\n  const directoryEntries = dirContents.map(entry => entry.name)\r\n\r\n  // 組合 schema 和 env 檔案的完整路徑\r\n  const schemaFilePath = path.join(rootDir, schemaFileName)\r\n  const envFilePath = path.join(rootDir, envFileName)\r\n\r\n  // 若有 .env 檔案，執行比對並停止遞迴\r\n  if (directoryEntries.includes(envFileName)) {\r\n    const [schemaExists, envExists] = await Promise.all([\r\n      fileReader.fileExists(schemaFilePath),\r\n      fileReader.fileExists(envFilePath)\r\n    ])\r\n\r\n    if (schemaExists && envExists) {\r\n      envHandler.checkEnvVariables(schemaFilePath, envFilePath, isStrict, isAlign)\r\n\r\n      return true\r\n    } else {\r\n      console.log(\r\n        colorFormat.formatBlue(`[info] Skipping check in ${rootDir}, searching deeper...`)\r\n      )\r\n    }\r\n  }\r\n\r\n  // 否則遞迴檢查子目錄\r\n  for (const item of dirContents) {\r\n    if (!item.isDirectory() || ['node_modules', 'dist'].includes(item.name)) {\r\n      continue\r\n    }\r\n\r\n    const subDirPath = path.join(rootDir, item.name)\r\n    const isChecked = await envAligner({ rootDir: subDirPath, fileNames, mode })\r\n\r\n    if (isChecked) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nmodule.exports = envAligner"],"names":["colorFormat","formatRedInverse","msg","formatRed","formatYellowInverse","formatYellow","formatBlueInverse","formatBlue","formatGreenInverse","formatGreen","fs","require$$0","dotenv","require$$1","require$$2","fileReader","parseEnvFile","filePath","fileContent","readFileSync","parsedContent","parse","console","error","process","exit","Object","keys","length","fileExists","async","targetPath","promises","access","constants","F_OK","validateFileNames","fileNames","forEach","key","validateDirectory","dirPath","stat","isDirectory","message","path","require$$3","require$$4","alignEnvWithSchema","schemaFilePath","envFilePath","schemaRaw","schemaVars","envVars","outputLines","lineBuffer","split","i","line","trim","push","startsWith","equalIndex","indexOf","slice","value","quoted","includes","writeFile","join","log","basename","envHandler","cloneSchemaToEnv","schemaFileName","envFileName","rootDir","copyFile","checkEnvVariables","isStrict","isAlign","schemaKeys","envKeys","missingKeys","filter","emptyValueKeys","rawValue","isQuoted","trimmed","extraKeys","envDir","dirname","warn","defaultDir","cwd","defaultSchemaFileName","defaultEnvFileName","_default","defaultFiles","schemaName","envName","defaultMode","cliExports","program","Option","envAligner","require$$5","mode","isClone","mergedFileNames","dirContents","readdir","withFileTypes","directoryEntries","map","entry","name","schemaExists","envExists","Promise","all","item","subDirPath","lib","version","description","showSuggestionAfterError","addHelpText","addOption","default","argv","opts","align","strict","dir","schema","env","clone","requireCli","cli","getDefaultExportFromCjs"],"mappings":"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"}