"use strict";var e=require("fs"),n=require("path"),r=require("dotenv");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o,i,s,a,l,c,f,u,m,d,p=t(e),v=t(n),$=t(r);function h(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function g(){if(i)return o;return i=1,o={formatRedInverse:function(e){return`[41m[37m${e}[0m`},formatRed:function(e){return`[31m${e}[0m`},formatYellowInverse:function(e){return`[43m[37m${e}[0m`},formatYellow:function(e){return`[33m${e}[0m`},formatBlueInverse:function(e){return`[44m[37m${e}[0m`},formatBlue:function(e){return`[34m${e}[0m`},formatGreenInverse:function(e){return`[42m[37m${e}[0m`},formatGreen:function(e){return`[32m${e}[0m`}}}function y(){if(a)return s;a=1;const e=p.default,n=$.default,r=g();return s={parseEnvFile:t=>{const o=e.readFileSync(t,"utf8"),i=n.parse(o);return i||(console.error(r.formatRedInverse(`\nFailed to parse ${t}`)),process.exit(1)),Object.keys(i).length||(console.error(r.formatRedInverse(`\n${t} is empty or has no valid variables.`)),process.exit(1)),i},fileExists:async function(n){try{return await e.promises.access(n,e.constants.F_OK),!0}catch{return!1}},validateFileNames:e=>{["schemaName","envName"].forEach((n=>{n in e||(console.error(r.formatRedInverse(`\nMissing required key: ${n}`)),process.exit(1)),"string"!=typeof e[n]&&(console.error(r.formatRedInverse(`\n${n} must be a string`)),process.exit(1))}))},validateDirectory:async function(n){try{(await e.promises.stat(n)).isDirectory()||(console.error(r.formatRed(`[error] ${n} is not a directory.`)),process.exit(1))}catch(e){console.error(r.formatRed(`[error] Failed to access ${n}: ${e.message}`)),process.exit(1)}}}}function w(){if(c)return l;c=1;const e=p.default,n=$.default,r=v.default,t=g(),o=y(),i=async(i,s)=>{const a=e.readFileSync(i,"utf8"),l=n.parse(a),c=o.parseEnvFile(s),f=[],u=a.split(/\r?\n/);for(let e=0;e<u.length;e++){const n=u[e].trim();if(""===n){f.push("");continue}if(n.startsWith("#")){f.push(u[e]);continue}const r=n.indexOf("=");if(-1!==r){const e=n.slice(0,r).trim();if(e in l){const n=c[e]??"",r=n.includes("\n")?`"${n}"`:n;f.push(`${e}=${r}`)}}}await e.promises.writeFile(s,f.join("\n"),"utf8"),console.log(t.formatGreenInverse(`\nAligned ${r.basename(s)} with ${r.basename(i)}`))};return l={cloneSchemaToEnv:async(n,i,s)=>{const a=r.join(s,n),l=r.join(s,i);await o.fileExists(a)||(console.error(t.formatRedInverse(`\nSchema file ${n} does not exist in ${s}`)),process.exit(1)),await o.fileExists(l)?console.log(t.formatBlue(`\n${i} already exists in ${s}, skipping copy.`)):(await e.promises.copyFile(a,l),console.log(t.formatGreen(`\nCopied ${n} to ${i} in ${s}`)))},alignEnvWithSchema:i,checkEnvVariables:async(e,n,s,a)=>{const l=o.parseEnvFile(e),c=o.parseEnvFile(n),f=Object.keys(l),u=Object.keys(c),m=f.filter((e=>!u.includes(e))),d=f.filter((e=>l[e]&&""===c[e]&&!m.includes(e))),p=s?u.filter((e=>!f.includes(e))):[],v=r.dirname(n);if(m.length>0&&(console.error(t.formatRedInverse(`\n[Missing Variables] in ${v}`)),console.log(t.formatRed(`→ ${m.join(", ")}`))),d.length>0&&(console.error(t.formatYellowInverse(`\n[Empty Variables] in ${v}`)),console.log(t.formatYellow(`→ ${d.join(", ")}`))),p.length>0&&(console.error(t.formatBlueInverse(`\n[Extra Variables] in ${v}`)),console.log(t.formatBlue(`→ ${p.join(", ")}`))),s&&a?await i(e,n):!s&&a&&console.warn(t.formatYellowInverse('\n[Warning] The "align" option can only be used in strict mode. Skipping alignment.')),m.length>0||d.length>0)process.exit(1);else{const e=`\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n      🎉 SUCCESS! ENV CHECK PASSED 🎉\n\n      ✅ All variables in: ${v}\n\n      ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n    `;console.log(t.formatGreen(e))}}}}var E=function(){if(d)return m;d=1;const e=p.default,n=v.default,r=g(),t=y(),o=w(),{defaultDir:i,defaultFiles:s,defaultMode:a}=function(){if(u)return f;u=1;const e=process.cwd(),n=".env.example",r=".env";return f={defaultDir:e,defaultSchemaFileName:n,defaultEnvFileName:r,defaultFiles:{schemaName:n,envName:r},defaultMode:{isStrict:!1,isAlign:!1}}}(),l=async({rootDir:c=i,fileNames:f=s,mode:u=a,isClone:m=!1}={})=>{const d={...s,...f};t.validateFileNames(d);const{schemaName:p,envName:v}=d,{isStrict:$,isAlign:h}=u;if(await t.validateDirectory(c),m){return void(await o.cloneSchemaToEnv(p,v,c)&&console.log(r.formatGreen(`✅ env file created successfully in ${c}`)))}const g=await e.promises.readdir(c,{withFileTypes:!0}),y=g.map((e=>e.name)),w=n.join(c,p),E=n.join(c,v);if(y.includes(v)){const[e,n]=await Promise.all([t.fileExists(w),t.fileExists(E)]);if(e&&n)return o.checkEnvVariables(w,E,$,h),!0;console.log(r.formatBlue(`[info] Skipping check in ${c}, searching deeper...`))}for(const e of g){if(!e.isDirectory()||["node_modules","dist"].includes(e.name))continue;const r=n.join(c,e.name);if(await l({rootDir:r,fileNames:f,mode:u}))return!0}return!1};return m=l}(),x=h(E);module.exports=x;
//# sourceMappingURL=index.min.js.map
